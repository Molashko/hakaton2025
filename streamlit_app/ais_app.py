import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
import uuid
import os
import sqlite3
import random
import time
import threading

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–ò–° - –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫",
    page_icon="‚öñÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .section-header {
        font-size: 1.5rem;
        font-weight: bold;
        color: #2c3e50;
        margin-top: 2rem;
        margin-bottom: 1rem;
        border-bottom: 2px solid #3498db;
        padding-bottom: 0.5rem;
    }
    .metric-card {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #3498db;
        margin: 0.5rem 0;
    }
    .success-banner {
        background-color: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 0.5rem;
        border: 1px solid #c3e6cb;
        margin: 1rem 0;
        text-align: center;
        font-size: 1.1rem;
    }
</style>
""", unsafe_allow_html=True)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ: SQLite
DB_PATH = os.environ.get('SQLITE_PATH', os.path.join(os.path.dirname(__file__), 'ais.db'))

def get_sqlite_conn():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_sqlite():
    conn = get_sqlite_conn()
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS tasks (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        category TEXT,
        priority TEXT,
        created_at TEXT,
        data TEXT
    )
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS executors (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        email TEXT NOT NULL,
        department TEXT,
        skills TEXT,
        active INTEGER DEFAULT 1,
        daily_limit INTEGER DEFAULT 10,
        assigned_today INTEGER DEFAULT 0,
        created_at TEXT,
        data TEXT
    )
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS assignments (
        id TEXT PRIMARY KEY,
        task_id TEXT,
        executor_id TEXT,
        assigned_at TEXT,
        score REAL
    )
    """)
    conn.commit()
    conn.close()

def _json_dumps(obj):
    try:
        return json.dumps(obj, ensure_ascii=False)
    except Exception:
        return '{}'

def _json_loads(s):
    if not s:
        return {}
    try:
        return json.loads(s)
    except Exception:
        return {}

def load_tasks_from_db():
    conn = get_sqlite_conn()
    cur = conn.cursor()
    cur.execute("SELECT id,name,category,priority,created_at,data FROM tasks ORDER BY datetime(created_at) DESC")
    rows = cur.fetchall()
    conn.close()
    tasks = []
    for r in rows:
        t = {
            'id': r['id'],
            'name': r['name'],
            'category': r['category'],
            'priority': r['priority'],
            'created_at': r['created_at'] or datetime.now().isoformat()
        }
        t.update(_json_loads(r['data']))
        tasks.append(t)
    return tasks

def load_executors_from_db():
    conn = get_sqlite_conn()
    cur = conn.cursor()
    cur.execute("SELECT id,name,email,department,skills,active,daily_limit,assigned_today,created_at,data FROM executors ORDER BY name")
    rows = cur.fetchall()
    conn.close()
    executors = []
    for r in rows:
        e = {
            'id': r['id'],
            'name': r['name'],
            'email': r['email'],
            'department': r['department'],
            'skills': r['skills'].split(',') if r['skills'] else [],
            'active': bool(r['active']),
            'daily_limit': r['daily_limit'],
            'assigned_today': r['assigned_today'],
            'created_at': r['created_at'] or datetime.now().isoformat()
        }
        e.update(_json_loads(r['data']))
        executors.append(e)
    return executors

def load_assignments_from_db():
    conn = get_sqlite_conn()
    cur = conn.cursor()
    cur.execute("SELECT id,task_id,executor_id,assigned_at,score FROM assignments ORDER BY datetime(assigned_at) DESC")
    rows = cur.fetchall()
    conn.close()
    return [{
        'id': r['id'],
        'task_id': r['task_id'],
        'executor_id': r['executor_id'],
        'assigned_at': r['assigned_at'] or datetime.now().isoformat(),
        'score': r['score'] if r['score'] is not None else 0.0
    } for r in rows]

def save_task_to_db(task):
    conn = get_sqlite_conn()
    cur = conn.cursor()
    base_keys = ['id','name','category','priority','created_at']
    data = {k: v for k, v in task.items() if k not in base_keys}
    cur.execute("""
        INSERT INTO tasks(id,name,category,priority,created_at,data)
        VALUES(?,?,?,?,?,?)
        ON CONFLICT(id) DO UPDATE SET
            name=excluded.name,
            category=excluded.category,
            priority=excluded.priority,
            created_at=excluded.created_at,
            data=excluded.data
    """, (
        task['id'], task['name'], task.get('category',''), task.get('priority',''), task['created_at'], _json_dumps(data)
    ))
    conn.commit()
    conn.close()
    return True

def save_executor_to_db(executor):
    conn = get_sqlite_conn()
    cur = conn.cursor()
    base_keys = ['id','name','email','department','skills','active','daily_limit','assigned_today','created_at']
    data = {k: v for k, v in executor.items() if k not in base_keys}
    skills_str = ','.join(executor.get('skills', [])) if isinstance(executor.get('skills'), list) else executor.get('skills', '')
    cur.execute("""
        INSERT INTO executors(id,name,email,department,skills,active,daily_limit,assigned_today,created_at,data)
        VALUES(?,?,?,?,?,?,?,?,?,?)
        ON CONFLICT(id) DO UPDATE SET
            name=excluded.name,
            email=excluded.email,
            department=excluded.department,
            skills=excluded.skills,
            active=excluded.active,
            daily_limit=excluded.daily_limit,
            assigned_today=excluded.assigned_today,
            created_at=excluded.created_at,
            data=excluded.data
    """, (
        executor['id'], executor['name'], executor['email'], executor.get('department',''), skills_str, 
        1 if executor.get('active', True) else 0, executor.get('daily_limit', 10), 
        executor.get('assigned_today', 0), executor['created_at'], _json_dumps(data)
    ))
    conn.commit()
    conn.close()
    return True

def save_assignment_to_db(assignment):
    conn = get_sqlite_conn()
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO assignments(id,task_id,executor_id,assigned_at,score)
        VALUES(?,?,?,?,?)
        ON CONFLICT(id) DO UPDATE SET
            task_id=excluded.task_id,
            executor_id=excluded.executor_id,
            assigned_at=excluded.assigned_at,
            score=excluded.score
    """, (
        assignment['id'], assignment['task_id'], assignment['executor_id'], assignment['assigned_at'], assignment.get('score', 0.0)
    ))
    conn.commit()
    conn.close()
    return True

def delete_executor_from_db(executor_id):
    conn = get_sqlite_conn()
    cur = conn.cursor()
    cur.execute("DELETE FROM assignments WHERE executor_id=?", (executor_id,))
    cur.execute("DELETE FROM executors WHERE id=?", (executor_id,))
    conn.commit()
    conn.close()
    return True

def clear_all_data_in_db():
    conn = get_sqlite_conn()
    cur = conn.cursor()
    cur.execute("DELETE FROM assignments")
    cur.execute("DELETE FROM tasks")
    cur.execute("UPDATE executors SET assigned_today=0")
    conn.commit()
    conn.close()
    return True

def reset_daily_counts_in_db():
    conn = get_sqlite_conn()
    cur = conn.cursor()
    cur.execute("UPDATE executors SET assigned_today=0")
    conn.commit()
    conn.close()
    return True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
def init_session_state():
    if 'db_initialized' not in st.session_state:
        init_sqlite()
        st.session_state.db_initialized = True
    if 'tasks' not in st.session_state:
        st.session_state.tasks = load_tasks_from_db()
    if 'executors' not in st.session_state:
        st.session_state.executors = load_executors_from_db()
    if 'assignments' not in st.session_state:
        st.session_state.assignments = load_assignments_from_db()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def render_header():
    st.markdown('<h1 class="main-header">‚öñÔ∏è –ê–ò–° - –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫</h1>', unsafe_allow_html=True)
    st.markdown("""
    <div style="text-align: center; color: #7f8c8d; margin-bottom: 2rem;">
        –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –º–µ–∂–¥—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏<br>
        <strong>–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</strong>
    </div>
    """, unsafe_allow_html=True)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def render_main_menu():
    st.sidebar.markdown("## üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "dashboard"
    
    current_page = st.session_state.current_page
    
    if st.sidebar.button("‚öñÔ∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", use_container_width=True, type="primary" if current_page == "dashboard" else "secondary"):
        st.session_state.current_page = "dashboard"
        st.rerun()
    
    if st.sidebar.button("üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏", use_container_width=True, type="primary" if current_page == "executors" else "secondary"):
        st.session_state.current_page = "executors"
        st.rerun()
    
    if st.sidebar.button("üß™ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", use_container_width=True, type="primary" if current_page == "load_test" else "secondary"):
        st.session_state.current_page = "load_test"
        st.rerun()
    
    if st.sidebar.button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True, type="primary" if current_page == "settings" else "secondary"):
        st.session_state.current_page = "settings"
        st.rerun()
    
    return st.session_state.current_page

# –î–∞—à–±–æ—Ä–¥ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
def _aggregate_per_minute(items, timestamp_key, window_minutes=5):
    now = datetime.now()
    start = now - timedelta(minutes=window_minutes)
    buckets = {}
    for i in range(window_minutes + 1):
        t = (start + timedelta(minutes=i)).replace(second=0, microsecond=0)
        buckets[t] = 0
    for it in items:
        try:
            ts = datetime.fromisoformat(it.get(timestamp_key, now.isoformat()))
            ts0 = ts.replace(second=0, microsecond=0)
            if ts0 >= start:
                buckets[ts0] = buckets.get(ts0, 0) + 1
        except Exception:
            pass
    times = sorted(buckets.keys())
    return pd.DataFrame({
        '–ú–∏–Ω—É—Ç–∞': [t.strftime('%H:%M') for t in times],
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [buckets[t] for t in times],
    })

def render_dashboard():
    st.markdown('<h2 class="section-header">‚öñÔ∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫</h2>', unsafe_allow_html=True)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ
    test_status = st.session_state.get('load_test_status')
    if test_status == 'running':
        progress = st.session_state.get('load_test_progress', 0)
        current = st.session_state.get('load_test_current', 0)
        total = st.session_state.get('load_test_total', 0)
        assigned = st.session_state.get('load_test_assigned', 0)
        
        with st.expander("üîÑ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...", expanded=True):
            st.progress(progress)
            st.write(f"**–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** {current}/{total} –∑–∞—è–≤–æ–∫ | **–ù–∞–∑–Ω–∞—á–µ–Ω–æ:** {assigned}")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"):
                    st.session_state.load_test_status = 'stopped'
                    st.rerun()
            with col2:
                if st.button("üß™ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"):
                    st.session_state.current_page = "load_test"
                    st.rerun()

    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    auto_refresh_enabled = st.session_state.get('auto_refresh', True)
    if auto_refresh_enabled:
        st.session_state.tasks = load_tasks_from_db()
        st.session_state.executors = load_executors_from_db()
        st.session_state.assignments = load_assignments_from_db()
        try:
            from streamlit_autorefresh import st_autorefresh
            st_autorefresh(interval=2000, limit=None, key="ais_realtime")
        except Exception:
            st.markdown('<meta http-equiv="refresh" content="2">', unsafe_allow_html=True)
    
    # –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    tasks = st.session_state.tasks
    assignments = st.session_state.assignments
    assigned_task_ids = set(a['task_id'] for a in assignments)
    unassigned_count = len([t for t in tasks if t['id'] not in assigned_task_ids])
    
    if unassigned_count > 0:
        col_button1, col_button2 = st.columns([3, 1])
        with col_button1:
            st.info(f"‚ö†Ô∏è –ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: **{unassigned_count}**")
        with col_button2:
            if st.button("ü§ñ –ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", type="primary", use_container_width=True):
                with st.spinner("–†–∞—Å–ø—Ä–µ–¥–µ–ª—è—é –∑–∞—è–≤–∫–∏..."):
                    assigned_count = auto_assign_unassigned_tasks()
                    st.session_state.tasks = load_tasks_from_db()
                    st.session_state.executors = load_executors_from_db()
                    st.session_state.assignments = load_assignments_from_db()
                    if assigned_count > 0:
                        st.success(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: {assigned_count}")
                    else:
                        st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞—è–≤–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")
                    st.rerun()
        st.markdown("---")
    
    # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        recent_tasks = len([t for t in st.session_state.tasks if (datetime.now() - datetime.fromisoformat(t['created_at'])).seconds < 60])
        st.metric(
            label="üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ",
            value=len(st.session_state.tasks),
            delta=f"+{recent_tasks} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É" if recent_tasks > 0 else "–ù–µ—Ç –Ω–æ–≤—ã—Ö"
        )
    
    with col2:
        active_executors = [e for e in st.session_state.executors if e.get('active', True)]
        total_assigned = sum(e['assigned_today'] for e in active_executors)
        st.metric(
            label="üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π",
            value=len(active_executors),
            delta=f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞—è–≤–æ–∫: {total_assigned}",
            delta_color="off"
        )
    
    with col3:
        # –†–∞—Å—á–µ—Ç MAE (Mean Absolute Error) –¥–ª—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏
        mae = 0
        if active_executors:
            utilizations = [e['assigned_today'] / e['daily_limit'] if e['daily_limit'] > 0 else 0 for e in active_executors]
            avg_util = sum(utilizations) / len(utilizations)
            mae = sum(abs(u - avg_util) for u in utilizations) / len(utilizations)
            st.metric(
                label="‚öñÔ∏è –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å (MAE)",
                value=f"{mae:.3f}",
                delta="–ß–µ–º –±–ª–∏–∂–µ –∫ 0, —Ç–µ–º –ª—É—á—à–µ",
                delta_color="inverse"
            )
        else:
            st.metric(label="‚öñÔ∏è –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å (MAE)", value="N/A")
    
    with col4:
        if active_executors:
            avg_load = sum(e['assigned_today'] for e in active_executors) / len(active_executors)
            st.metric(
                label="üìà –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞",
                value=f"{avg_load:.1f}",
                delta=f"–∑–∞—è–≤–æ–∫/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
            )
        else:
            st.metric(label="üìà –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞", value="0")
    
    # –ì—Ä–∞—Ñ–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    st.markdown("### üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏")
    
    if active_executors:
        # –ì—Ä–∞—Ñ–∏–∫ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        exec_data = []
        for e in active_executors:
            utilization = e['assigned_today'] / e['daily_limit'] if e['daily_limit'] > 0 else 0
            exec_data.append({
                '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å': e['name'],
                '–ù–∞–∑–Ω–∞—á–µ–Ω–æ': e['assigned_today'],
                '–õ–∏–º–∏—Ç': e['daily_limit'],
                '–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è': utilization * 100
            })
        
        df_exec = pd.DataFrame(exec_data)
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        avg_utilization = df_exec['–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è'].mean()
        std_utilization = df_exec['–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è'].std() if len(df_exec) > 1 else 0
        min_utilization = df_exec['–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è'].min()
        max_utilization = df_exec['–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è'].max()
        range_utilization = max_utilization - min_utilization
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        st.markdown("#### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
        stat_col1, stat_col2, stat_col3, stat_col4 = st.columns(4)
        
        with stat_col1:
            st.metric(
                label="üìä –°—Ä–µ–¥–Ω–µ–µ",
                value=f"{avg_utilization:.1f}%",
                help="–°—Ä–µ–¥–Ω—è—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"
            )
        
        with stat_col2:
            st.metric(
                label="üìè –°—Ç–∞–Ω–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ",
                value=f"{std_utilization:.2f}%",
                delta="–ß–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ" if std_utilization > 0 else "–ò–¥–µ–∞–ª—å–Ω–æ!",
                delta_color="inverse",
                help="–†–∞–∑–±—Ä–æ—Å —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ (œÉ). –•–æ—Ä–æ—à–æ: < 5%"
            )
        
        with stat_col3:
            st.metric(
                label="üìê –†–∞–∑–±—Ä–æ—Å",
                value=f"{range_utilization:.1f}%",
                delta=f"Min: {min_utilization:.1f}%, Max: {max_utilization:.1f}%",
                help="–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É—Ç–∏–ª–∏–∑–∞—Ü–∏–µ–π"
            )
        
        with stat_col4:
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            if std_utilization < 5:
                quality = "–û—Ç–ª–∏—á–Ω–æ ‚úÖ"
            elif std_utilization < 10:
                quality = "–•–æ—Ä–æ—à–æ üëç"
            else:
                quality = "–¢—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ‚ö†Ô∏è"
            
            st.metric(
                label="üéØ –ö–∞—á–µ—Å—Ç–≤–æ",
                value=quality,
                help=f"–û—Ü–µ–Ω–∫–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–Ω–∞ –æ—Å–Ω–æ–≤–µ œÉ = {std_utilization:.2f}%)"
            )
        
        st.markdown("---")
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –£—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å –ª–∏–Ω–∏–µ–π —Å—Ä–µ–¥–Ω–µ–≥–æ
        fig1 = px.bar(
            df_exec,
            x='–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
            y='–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è',
            color='–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è',
            color_continuous_scale=['green', 'yellow', 'orange', 'red'],
            range_color=[0, 100],
            title="–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (%)",
            labels={'–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è': '–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è (%)'}
        )
        fig1.add_hline(y=100, line_dash="dash", line_color="red", annotation_text="–õ–∏–º–∏—Ç (100%)", annotation_position="right")
        fig1.add_hline(y=avg_utilization, line_dash="dot", line_color="blue", 
                      annotation_text=f"–°—Ä–µ–¥–Ω–µ–µ: {avg_utilization:.1f}%", 
                      annotation_position="left")
        fig1.update_layout(xaxis_tickangle=-45, showlegend=False, height=400)
        st.plotly_chart(fig1, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2 –∏ 3 –≤ –¥–≤—É—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
        col_graph1, col_graph2 = st.columns(2)
        
        with col_graph1:
            # –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
            df_exec['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ'] = df_exec['–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è'] - avg_utilization
            
            fig2 = px.bar(
                df_exec,
                x='–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
                y='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ',
                color='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ',
                color_continuous_scale=['red', 'yellow', 'green', 'yellow', 'red'],
                color_continuous_midpoint=0,
                title="–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ (%)",
                labels={'–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (%)'}
            )
            fig2.add_hline(y=0, line_dash="solid", line_color="gray", line_width=1)
            fig2.update_layout(xaxis_tickangle=-45, showlegend=False, height=350)
            st.plotly_chart(fig2, use_container_width=True)
        
        with col_graph2:
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
            fig3 = px.histogram(
                df_exec,
                x='–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è',
                nbins=min(10, len(df_exec)),
                title="–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏",
                labels={'–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è': '–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è (%)', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π'},
                color_discrete_sequence=['#1f77b4']
            )
            fig3.add_vline(x=avg_utilization, line_dash="dash", line_color="red",
                          annotation_text=f"–°—Ä–µ–¥–Ω–µ–µ: {avg_utilization:.1f}%",
                          annotation_position="top")
            fig3.update_layout(showlegend=False, height=350, bargap=0.1)
            st.plotly_chart(fig3, use_container_width=True)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        st.markdown("### üìã –î–µ—Ç–∞–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
        df_display = df_exec.copy()
        df_display['–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è'] = df_display['–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è'].apply(lambda x: f"{x:.1f}%")
        df_display['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ'] = df_display['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ'].apply(lambda x: f"{x:+.1f}%")
        df_display = df_display[['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', '–ù–∞–∑–Ω–∞—á–µ–Ω–æ', '–õ–∏–º–∏—Ç', '–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ']]
        st.dataframe(df_display, use_container_width=True, hide_index=True)
    else:
        st.info("üë• –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ —Ä–∞–∑–¥–µ–ª–µ '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏'")
    
    # –ì—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### ‚è± –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç)")
        df_tasks_min = _aggregate_per_minute(st.session_state.tasks, 'created_at', window_minutes=5)
        fig2 = px.line(df_tasks_min, x='–ú–∏–Ω—É—Ç–∞', y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', markers=True, color_discrete_sequence=['#1f77b4'])
        st.plotly_chart(fig2, use_container_width=True)
    
    with col2:
        st.markdown("### ‚ö° –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç)")
        df_assign_min = _aggregate_per_minute(st.session_state.assignments, 'assigned_at', window_minutes=5)
        fig3 = px.line(df_assign_min, x='–ú–∏–Ω—É—Ç–∞', y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', markers=True, color_discrete_sequence=['#2ca02c'])
        st.plotly_chart(fig3, use_container_width=True)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
def render_executors_management():
    st.markdown('<h2 class="section-header">üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏</h2>', unsafe_allow_html=True)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    editing_executor_id = None
    for executor in st.session_state.executors:
        if st.session_state.get(f"editing_executor_{executor['id']}", False):
            editing_executor_id = executor['id']
            break
    
    if editing_executor_id:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        executor_to_edit = next(e for e in st.session_state.executors if e['id'] == editing_executor_id)
        st.markdown("### ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        
        col1, col2 = st.columns(2)
        
        with col1:
            executor_name = st.text_input("–ò–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", value=executor_to_edit['name'], key="edit_executor_name")
            executor_email = st.text_input("Email", value=executor_to_edit['email'], key="edit_executor_email")
            department = st.selectbox("–û—Ç–¥–µ–ª", ["IT", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", "–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥", "–î—Ä—É–≥–æ–µ"], 
                                     index=["IT", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", "–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥", "–î—Ä—É–≥–æ–µ"].index(executor_to_edit.get('department', 'IT')), 
                                     key="edit_department")
        
        with col2:
            skills = st.multiselect("–ù–∞–≤—ã–∫–∏", ["Python", "JavaScript", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤", "–ü—Ä–æ–¥–∞–∂–∏"], 
                                   default=executor_to_edit.get('skills', []), key="edit_skills")
            daily_limit = st.number_input("–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞—è–≤–æ–∫", min_value=1, max_value=100, value=executor_to_edit.get('daily_limit', 10), key="edit_daily_limit")
            active = st.checkbox("–ê–∫—Ç–∏–≤–µ–Ω", value=executor_to_edit.get('active', True), key="edit_active")
        
        st.markdown("---")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary"):
                if executor_name and executor_email:
                    executor_to_edit['name'] = executor_name
                    executor_to_edit['email'] = executor_email
                    executor_to_edit['department'] = department
                    executor_to_edit['skills'] = skills
                    executor_to_edit['daily_limit'] = daily_limit
                    executor_to_edit['active'] = active
                    
                    save_executor_to_db(executor_to_edit)
                    st.session_state[f"editing_executor_{editing_executor_id}"] = False
                    st.session_state.executors = load_executors_from_db()
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
                    assigned_count = auto_assign_unassigned_tasks()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
                    st.session_state.assignments = load_assignments_from_db()
                    st.session_state.executors = load_executors_from_db()
                    
                    if assigned_count > 0:
                        st.success(f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –∑–∞—è–≤–æ–∫: {assigned_count}")
                    else:
                        st.success("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    st.rerun()
                else:
                    st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        
        with col2:
            if st.button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", type="secondary"):
                st.session_state[f"editing_executor_{editing_executor_id}"] = False
                st.rerun()
        
        with col3:
            if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", type="secondary"):
                delete_executor_from_db(editing_executor_id)
                st.session_state.executors = load_executors_from_db()
                st.session_state.assignments = load_assignments_from_db()
                st.session_state[f"editing_executor_{editing_executor_id}"] = False
                st.success("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!")
                st.rerun()
        
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    st.markdown("### ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
    
    col1, col2 = st.columns(2)
    
    with col1:
        executor_name = st.text_input("–ò–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        executor_email = st.text_input("Email", placeholder="email@example.com")
        department = st.selectbox("–û—Ç–¥–µ–ª", ["IT", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", "–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥", "–î—Ä—É–≥–æ–µ"])
    
    with col2:
        skills = st.multiselect("–ù–∞–≤—ã–∫–∏", ["Python", "JavaScript", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤", "–ü—Ä–æ–¥–∞–∂–∏"])
        daily_limit = st.number_input("–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞—è–≤–æ–∫", min_value=1, max_value=100, value=10)
        active = st.checkbox("–ê–∫—Ç–∏–≤–µ–Ω", value=True)
    
    st.markdown("---")
    
    if st.button("üë• –î–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", type="primary"):
        if executor_name and executor_email:
            new_executor = {
                'id': str(uuid.uuid4()),
                'name': executor_name,
                'email': executor_email,
                'department': department,
                'skills': skills,
                'active': active,
                'daily_limit': daily_limit,
                'assigned_today': 0,
                'created_at': datetime.now().isoformat()
            }
            save_executor_to_db(new_executor)
            st.session_state.executors = load_executors_from_db()
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            assigned_count = auto_assign_unassigned_tasks()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
            st.session_state.assignments = load_assignments_from_db()
            st.session_state.executors = load_executors_from_db()
            
            if assigned_count > 0:
                st.success(f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –∑–∞—è–≤–æ–∫: {assigned_count}")
            else:
                st.success("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            st.rerun()
        else:
            st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
    
    # –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    st.markdown("### üë• –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
    
    if st.session_state.executors:
        for executor in st.session_state.executors:
            with st.container():
                col1, col2, col3 = st.columns([3, 1, 1])
                
                with col1:
                    status_color = "üü¢" if executor.get('active', True) else "üî¥"
                    st.markdown(f"**{status_color} {executor['name']}**")
                    st.markdown(f"**Email:** {executor['email']} | **–û—Ç–¥–µ–ª:** {executor['department']}")
                    st.markdown(f"**–ù–∞–≤—ã–∫–∏:** {', '.join(executor['skills'])} | **–ù–∞–∑–Ω–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è:** {executor['assigned_today']}/{executor['daily_limit']}")
                
                with col2:
                    if st.button(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_exec_{executor['id']}"):
                        st.session_state[f"editing_executor_{executor['id']}"] = True
                        st.rerun()
                
                with col3:
                    if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_exec_{executor['id']}"):
                        delete_executor_from_db(executor['id'])
                        st.session_state.executors = load_executors_from_db()
                        st.session_state.assignments = load_assignments_from_db()
                        st.success("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!")
                        st.rerun()
                
                st.markdown("---")
    else:
        st.info("üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤—ã—à–µ.")

# –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
def find_best_executor_simple(task, executors):
    """–ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    active_executors = [e for e in executors if e.get('active', True) and e['assigned_today'] < e['daily_limit']]
    if not active_executors:
        return None
    
    best_executor = None
    best_score = -1.0
    
    for executor in active_executors:
        # –†–∞—Å—á–µ—Ç score –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        utilization = executor['assigned_today'] / executor['daily_limit'] if executor['daily_limit'] > 0 else 0
        fairness_score = 1.0 - utilization
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞
        department_bonus = 1.5 if executor.get('department') == task.get('category') else 1.0
        
        # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        priority_bonus = {'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π': 2.0, '–í—ã—Å–æ–∫–∏–π': 1.5, '–°—Ä–µ–¥–Ω–∏–π': 1.0, '–ù–∏–∑–∫–∏–π': 0.8}.get(task.get('priority', '–°—Ä–µ–¥–Ω–∏–π'), 1.0)
        
        final_score = fairness_score * department_bonus * priority_bonus
        
        if final_score > best_score:
            best_score = final_score
            best_executor = executor
    
    return best_executor, best_score if best_executor else None

def auto_assign_unassigned_tasks():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Å–µ –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    tasks = load_tasks_from_db()
    assignments = load_assignments_from_db()
    executors = load_executors_from_db()
    
    if not executors or not tasks:
        return 0
    
    # –ù–∞–π—Ç–∏ ID –≤—Å–µ—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    assigned_task_ids = set(a['task_id'] for a in assignments)
    
    # –ù–∞–π—Ç–∏ –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    unassigned_tasks = [t for t in tasks if t['id'] not in assigned_task_ids]
    
    if not unassigned_tasks:
        return 0
    
    assigned_count = 0
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∂–¥—É—é –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
    for task in unassigned_tasks:
        result = find_best_executor_simple(task, executors)
        if result:
            executor, score = result
            assignment = {
                'id': str(uuid.uuid4()),
                'task_id': task['id'],
                'executor_id': executor['id'],
                'assigned_at': datetime.now().isoformat(),
                'score': score
            }
            save_assignment_to_db(assignment)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            executor['assigned_today'] += 1
            save_executor_to_db(executor)
            
            assigned_count += 1
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            executors = load_executors_from_db()
    
    return assigned_count

def run_load_test_background(num_tasks, batch_size, delay_ms):
    """–§–æ–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        categories = ["IT", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", "–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥"]
        priorities = ["–ù–∏–∑–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"]
        
        st.session_state.load_test_status = 'running'
        st.session_state.load_test_progress = 0
        st.session_state.load_test_current = 0
        st.session_state.load_test_total = num_tasks
        st.session_state.load_test_assigned = 0
        
        total_generated = 0
        total_assigned = 0
        start_time = time.time()
        
        for i in range(0, num_tasks, batch_size):
            if st.session_state.get('load_test_status') == 'stopped':
                break
            
            current_batch_size = min(batch_size, num_tasks - i)
            executors = load_executors_from_db()
            
            if not executors:
                st.session_state.load_test_status = 'error'
                st.session_state.load_test_message = "–ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π!"
                return
            
            for j in range(current_batch_size):
                task_id = str(uuid.uuid4())
                task = {
                    'id': task_id,
                    'name': f"–ó–∞—è–≤–∫–∞ #{total_generated + j + 1}",
                    'category': random.choice(categories),
                    'priority': random.choice(priorities),
                    'created_at': datetime.now().isoformat()
                }
                
                save_task_to_db(task)
                
                result = find_best_executor_simple(task, executors)
                if result:
                    executor, score = result
                    assignment = {
                        'id': str(uuid.uuid4()),
                        'task_id': task_id,
                        'executor_id': executor['id'],
                        'assigned_at': datetime.now().isoformat(),
                        'score': score
                    }
                    save_assignment_to_db(assignment)
                    
                    executor['assigned_today'] += 1
                    save_executor_to_db(executor)
                    
                    total_assigned += 1
            
            total_generated += current_batch_size
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ session_state
            st.session_state.load_test_progress = total_generated / num_tasks
            st.session_state.load_test_current = total_generated
            st.session_state.load_test_assigned = total_assigned
            
            if delay_ms > 0 and i + batch_size < num_tasks:
                time.sleep(delay_ms / 1000.0)
        
        end_time = time.time()
        elapsed_time = end_time - start_time
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        st.session_state.load_test_status = 'completed'
        st.session_state.load_test_elapsed = elapsed_time
        st.session_state.load_test_performance = total_generated / elapsed_time if elapsed_time > 0 else 0
        
    except Exception as e:
        st.session_state.load_test_status = 'error'
        st.session_state.load_test_message = f"–û—à–∏–±–∫–∞: {str(e)}"

def render_load_test():
    st.markdown('<h2 class="section-header">üß™ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>', unsafe_allow_html=True)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ
    test_status = st.session_state.get('load_test_status')
    
    if test_status == 'running':
        st.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏!")
        
        progress = st.session_state.get('load_test_progress', 0)
        current = st.session_state.get('load_test_current', 0)
        total = st.session_state.get('load_test_total', 0)
        assigned = st.session_state.get('load_test_assigned', 0)
        
        st.progress(progress)
        st.write(f"**–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** {current}/{total} –∑–∞—è–≤–æ–∫ | **–ù–∞–∑–Ω–∞—á–µ–Ω–æ:** {assigned}")
        
        if st.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", type="secondary"):
            st.session_state.load_test_status = 'stopped'
            st.warning("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            st.rerun()
            
    elif test_status == 'completed':
        elapsed = st.session_state.get('load_test_elapsed', 0)
        performance = st.session_state.get('load_test_performance', 0)
        current = st.session_state.get('load_test_current', 0)
        assigned = st.session_state.get('load_test_assigned', 0)
        
        st.success(f"""
        ‚úÖ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**  
        –°–æ–∑–¥–∞–Ω–æ –∑–∞—è–≤–æ–∫: {current} | –ù–∞–∑–Ω–∞—á–µ–Ω–æ: {assigned}  
        –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.2f} —Å–µ–∫ | –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {performance:.1f} –∑–∞—è–≤–æ–∫/—Å–µ–∫
        """)
        
        if st.button("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"):
            st.session_state.load_test_status = None
            st.rerun()
            
        st.balloons()
    
    elif test_status == 'error':
        error_msg = st.session_state.get('load_test_message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        st.error(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
        
        if st.button("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"):
            st.session_state.load_test_status = None
            st.rerun()
            
    # –§–æ—Ä–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ—Å—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω)
    if test_status not in ['running']:
        st.markdown("""
        ### üéØ –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫
        
        –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π.
        **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ - –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏!**
        """)
        
        col1, col2 = st.columns(2)
        
    with col1:
            num_tasks = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", min_value=10, max_value=10000, value=100, step=10)
            batch_size = st.number_input("–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–∑–∞—è–≤–æ–∫ –∑–∞ —Ä–∞–∑)", min_value=1, max_value=100, value=10)
        
    with col2:
            delay_ms = st.slider("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–º—Å)", min_value=0, max_value=1000, value=100, step=50)
    
    st.markdown("---")

    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", type="primary"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
            executors = load_executors_from_db()
            if not executors:
                st.error("‚ùå –ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ —Ä–∞–∑–¥–µ–ª–µ '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏'")
            return
    
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            test_thread = threading.Thread(
                target=run_load_test_background,
                args=(num_tasks, batch_size, delay_ms),
                daemon=True
            )
            test_thread.start()
            
            st.success("‚úÖ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ! –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏.")
            st.rerun()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞
    st.markdown("### üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ", len(st.session_state.tasks))
    
    with col2:
        st.metric("–í—Å–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π", len(st.session_state.assignments))
    
    with col3:
        active_executors = [e for e in st.session_state.executors if e.get('active', True)]
        total_assigned_today = sum(e['assigned_today'] for e in active_executors)
        st.metric("–í—Å–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è", total_assigned_today)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
def render_settings():
    st.markdown('<h2 class="section-header">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</h2>', unsafe_allow_html=True)
    
    st.markdown("### üéõ –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞")
        auto_refresh = st.checkbox("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞", value=st.session_state.get('auto_refresh', True))
        st.session_state.auto_refresh = auto_refresh
        
        if auto_refresh:
            st.info("‚úÖ –î–∞—à–±–æ—Ä–¥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã")
        else:
            st.warning("‚ö†Ô∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –û–±–Ω–æ–≤–ª—è–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ä—É—á–Ω—É—é")
    
    with col2:
        st.markdown("#### üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
        
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–Ω–µ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏", type="secondary"):
            reset_daily_counts_in_db()
            st.session_state.executors = load_executors_from_db()
            st.success("‚úÖ –î–Ω–µ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!")
            st.rerun()
    
    st.markdown("---")
    
    st.markdown("### üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    st.warning("‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –≠—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã!")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", type="secondary"):
            clear_all_data_in_db()
            st.session_state.tasks = load_tasks_from_db()
            st.session_state.executors = load_executors_from_db()
            st.session_state.assignments = load_assignments_from_db()
            st.success("‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã!")
            st.rerun()
    
    with col2:
        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", type="secondary"):
            conn = get_sqlite_conn()
            cur = conn.cursor()
            cur.execute("DELETE FROM assignments")
            cur.execute("DELETE FROM executors")
            conn.commit()
            conn.close()
            st.session_state.executors = load_executors_from_db()
            st.session_state.assignments = load_assignments_from_db()
            st.success("‚úÖ –í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã!")
            st.rerun()
    
    st.markdown("---")
    
    st.markdown("### üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–í–µ—Ä—Å–∏—è –ë–î", "SQLite 3")
    
    with col2:
        st.metric("–§–∞–π–ª –ë–î", os.path.basename(DB_PATH))
    
    with col3:
        db_size = os.path.getsize(DB_PATH) / 1024  # KB
        st.metric("–†–∞–∑–º–µ—Ä –ë–î", f"{db_size:.1f} KB")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_session_state()
    render_header()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    selected_page = render_main_menu()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if selected_page == "dashboard":
        render_dashboard()
    elif selected_page == "executors":
        render_executors_management()
    elif selected_page == "load_test":
        render_load_test()
    elif selected_page == "settings":
        render_settings()

if __name__ == "__main__":
    main()
