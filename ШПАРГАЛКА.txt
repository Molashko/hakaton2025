═══════════════════════════════════════════════════════════
            АИС - СИСТЕМА РАСПРЕДЕЛЕНИЯ ЗАЯВОК
              ШПАРГАЛКА ДЛЯ БЫСТРОГО ЗАПУСКА
           (Версия 2.0 - Автораспределение + Фон)
═══════════════════════════════════════════════════════════

🐳 ЗАПУСК ЧЕРЕЗ DOCKER (РЕКОМЕНДУЕТСЯ)
═══════════════════════════════════════════════════════════

  1. Двойной клик: docker_init.bat       (первый раз)
  2. Двойной клик: docker_start.bat      (каждый раз)
  3. Открыть: http://localhost:8501
  4. Готово! Система автоматически распределяет заявки


📁 BAT-ФАЙЛЫ ДЛЯ УПРАВЛЕНИЯ
═══════════════════════════════════════════════════════════

  docker_init.bat   → Инициализация (10 исполнителей)
  docker_start.bat  → Запуск системы
  docker_stop.bat   → Остановка
  docker_reset.bat  → Полный сброс для новой демонстрации


🎭 ДЕМОНСТРАЦИЯ (5 МИНУТ) - ОБНОВЛЕННАЯ!
═══════════════════════════════════════════════════════════

  Минута 1: Раздел "⚖️ Распределение"
    → Показать пустую систему
    → Объяснить MAE метрику
    → Показать статистику распределения

  Минуты 2-3: Раздел "🧪 Нагрузочное тестирование"
    → Заявок: 1000
    → Батч: 50
    → Задержка: 50 мс
    → Нажать "🚀 Запустить"
    ⭐ ПЕРЕКЛЮЧИТЬСЯ на "⚖️ Распределение" - тест продолжается!
    → Показать индикатор прогресса на странице распределения

  Минуты 4-5: Раздел "⚖️ Распределение"
    → MAE < 0.05 (отлично!)
    → Стандартное отклонение < 5% (Отлично ✅)
    → График утилизации с линией среднего
    → График отклонений от среднего
    → Гистограмма распределения (нормальное распределение!)
    → Таблица с отклонениями (+X.X% / -X.X%)

  Бонус: Автоматическое распределение
    → Перейти в "👥 Исполнители"
    → Добавить нового исполнителя
    → Увидеть сообщение: "Автоматически назначено заявок: X"
    → Вернуться в "⚖️ Распределение" - обновленная статистика!


✨ НОВЫЕ ВОЗМОЖНОСТИ (v2.0)
═══════════════════════════════════════════════════════════

  🤖 АВТОМАТИЧЕСКОЕ РАСПРЕДЕЛЕНИЕ:
    ✅ Каждые 2 секунды система сама назначает заявки
    ✅ При добавлении исполнителя - автоназначение
    ✅ При редактировании исполнителя - автоназначение
    ✅ Никаких кнопок - всё полностью автоматически!

  🧪 ФОНОВОЕ ТЕСТИРОВАНИЕ:
    ✅ Можно переключаться между вкладками
    ✅ Тест продолжается в фоновом режиме (threading)
    ✅ Прогресс виден на всех страницах
    ✅ Статус сохраняется в БД (load_test_status)

  📊 ВИЗУАЛИЗАЦИЯ НОРМАЛЬНОГО РАСПРЕДЕЛЕНИЯ:
    ✅ Статистика: среднее, σ, разброс, качество
    ✅ График отклонений от среднего
    ✅ Гистограмма распределения утилизации
    ✅ Таблица с отклонениями для каждого


📊 МЕТРИКИ - ОБНОВЛЕННЫЕ
═══════════════════════════════════════════════════════════

  MAE (справедливость):
    < 0.05    → Отлично ✅✅✅
    0.05-0.15 → Хорошо ✅
    > 0.15    → Нужна оптимизация ⚠️

  Стандартное отклонение (σ):
    < 5%      → Отлично ✅✅✅
    5-10%     → Хорошо 👍
    > 10%     → Требует оптимизации ⚠️

  Утилизация (цветовая индикация):
    0-70%   → 🟢 Зеленый (норма)
    70-90%  → 🟡 Желтый (высокая)
    90-100% → 🔴 Красный (критическая)

  Отклонение от среднего:
    +10%    → перегружен на 10%
    -10%    → недогружен на 10%
    ±0%     → идеально (на среднем уровне)


🔧 КОМАНДЫ DOCKER
═══════════════════════════════════════════════════════════

  docker-compose up              → Запуск
  docker-compose up -d           → Запуск в фоне
  docker-compose stop            → Остановка
  docker-compose restart ais     → Перезапуск приложения
  docker-compose logs -f ais     → Просмотр логов (real-time)
  docker-compose logs ais --tail 50  → Последние 50 строк
  docker-compose down            → Полная остановка


💡 ЧТО ГОВОРИТЬ - ОБНОВЛЕННЫЕ ТЕЗИСЫ
═══════════════════════════════════════════════════════════

  О справедливости (MAE):
    "MAE показывает насколько равномерно распределена
    нагрузка. У нас MAE < 0.05, что означает отличное
    распределение - все исполнители загружены одинаково."

  О производительности:
    "Система обработала 1000 заявок за 2-3 секунды,
    это около 400-500 заявок в секунду. При этом
    справедливость не пострадала."

  Об утилизации:
    "На графике видно, что все в зеленой зоне.
    Никто не перегружен, но и простоя нет.
    Стандартное отклонение меньше 5% - это оптимально."

  О фоновом тестировании (НОВОЕ!):
    "Обратите внимание - я запустил генерацию 1000 заявок,
    но могу свободно переключаться между разделами.
    Тест работает в фоновом режиме, не блокируя интерфейс.
    На любой странице виден прогресс выполнения."

  Об автоматическом распределении (НОВОЕ!):
    "Система автоматически распределяет заявки каждые
    2 секунды. Если я добавлю нового исполнителя прямо
    сейчас, он сразу получит свою долю заявок.
    Никакого ручного вмешательства не требуется."

  О нормальном распределении (НОВОЕ!):
    "Посмотрите на гистограмму - это нормальное
    распределение! Большинство исполнителей загружены
    на 50-70%, отклонения минимальны. График отклонений
    показывает что все близко к нулю - идеальный баланс."


🐛 ПРОБЛЕМЫ И РЕШЕНИЯ
═══════════════════════════════════════════════════════════

  Порт 8501 занят:
    → docker-compose down
    → docker-compose up

  Нет исполнителей:
    → docker_init.bat

  Изменения не применяются:
    → docker-compose down
    → docker-compose build --no-cache
    → docker-compose up

  БД не создана:
    → docker-compose run --rm ais python scripts/init_demo_data.py

  Нагрузочное тестирование не запускается:
    → Убедиться что есть активные исполнители
    → docker-compose restart ais
    → docker-compose logs ais --tail 50

  Автообновление не работает:
    → "⚙️ Настройки" → включить "Автообновление дашборда"
    → Обновить страницу (F5)

  Тест останавливается при переключении вкладок:
    → Это баг старой версии, в v2.0 исправлено!
    → Тест работает в отдельном потоке (threading)


✅ CHECKLIST ПЕРЕД ДЕМОНСТРАЦИЕЙ
═══════════════════════════════════════════════════════════

  [ ] Docker Desktop запущен
  [ ] Выполнен docker_init.bat (первый раз)
  [ ] Выполнен docker_start.bat
  [ ] Открыт http://localhost:8501
  [ ] Видно 10 исполнителей на дашборде
  [ ] Проверено автообновление (страница обновляется каждые 2 сек)
  [ ] Протестировано фоновое тестирование (переключение вкладок)
  [ ] Добавлен тестовый исполнитель (проверка автоназначения)


🎯 ГЛАВНОЕ - ВЕРСИЯ 2.0
═══════════════════════════════════════════════════════════

  ✅ Всё работает через Docker
  ✅ Все зависимости в requirements.txt
  ✅ БД сохраняется локально (streamlit_app/ais.db)
  ✅ Фокус на распределении под нагрузкой
  ✅ Русский интерфейс
  ✅ Real-time обновление (каждые 2 сек)
  
  🆕 АВТОМАТИЧЕСКОЕ РАСПРЕДЕЛЕНИЕ без кнопок!
  🆕 ФОНОВОЕ ТЕСТИРОВАНИЕ в отдельном потоке!
  🆕 ПРОДВИНУТАЯ ВИЗУАЛИЗАЦИЯ (σ, гистограммы, отклонения)!
  🆕 МОЖНО ПЕРЕКЛЮЧАТЬСЯ между вкладками во время теста!


🚀 БЫСТРЫЙ СТАРТ ПРЯМО СЕЙЧАС
═══════════════════════════════════════════════════════════

  1. Запустить Docker Desktop
  2. Двойной клик: docker_init.bat
  3. Двойной клик: docker_start.bat
  4. Открыть: http://localhost:8501
  5. Запустить нагрузочное тестирование (1000 заявок)
  6. Переключиться на "Распределение" - тест продолжается!
  7. Добавить нового исполнителя - автоматически получит заявки!
  8. Демонстрировать нормальное распределение! 📊


📋 СЦЕНАРИЙ ВПЕЧАТЛЯЮЩЕЙ ДЕМОНСТРАЦИИ
═══════════════════════════════════════════════════════════

  Шаг 1: Показать пустую систему
    → "Вот 10 исполнителей, они ждут работы"

  Шаг 2: Запустить нагрузочный тест (1000 заявок)
    → "Сейчас мы сгенерируем 1000 заявок"
    → Нажать "🚀 Запустить"

  Шаг 3: ПЕРЕКЛЮЧИТЬСЯ на "Распределение"
    → "Обратите внимание - я ушел на другую страницу"
    → "Тест продолжается в фоновом режиме!"
    → Показать индикатор прогресса

  Шаг 4: Показать результаты
    → "MAE < 0.05 - идеальное распределение!"
    → "Стандартное отклонение < 5% - все загружены одинаково"
    → Показать график с линией среднего
    → Показать график отклонений (все близко к нулю)
    → Показать гистограмму - нормальное распределение!

  Шаг 5: Добавить исполнителя
    → Перейти в "Исполнители"
    → Добавить нового
    → "Смотрите - система автоматически назначила ему X заявок!"

  Шаг 6: Финал
    → Вернуться на "Распределение"
    → "Статистика обновилась автоматически"
    → "Система сама поддерживает баланс"


🎓 АЛГОРИТМ РАСПРЕДЕЛЕНИЯ (ДЛЯ ТЕХНИЧЕСКИХ ВОПРОСОВ)
═══════════════════════════════════════════════════════════

  1. Fairness Score = 1.0 - (назначено / лимит)
     → Чем меньше загружен, тем выше приоритет

  2. Department Bonus = 1.5 (если отдел совпадает) или 1.0
     → Бонус за соответствие

  3. Priority Bonus:
     Критический → 2.0
     Высокий     → 1.5
     Средний     → 1.0
     Низкий      → 0.8

  4. Final Score = Fairness × Department × Priority
     → Исполнитель с максимальным Score получает заявку!


🔍 ДЕТАЛИ ТАБЛИЦ БД (ДЛЯ ТЕХНИЧЕСКИХ ВОПРОСОВ)
═══════════════════════════════════════════════════════════

  tasks            → Все заявки
  executors        → Все исполнители
  assignments      → Связь заявок и исполнителей
  load_test_status → Статус фонового теста (НОВОЕ в v2.0!)


🌐 ТЕХНОЛОГИЧЕСКИЙ СТЕК
═══════════════════════════════════════════════════════════

  Frontend:         Streamlit 1.28.1
  Database:         SQLite (локальная)
  Визуализация:     Plotly Express
  Многопоточность:  Threading (для фонового тестирования)
  Контейнеризация:  Docker + Docker Compose
  Язык:             Python 3.11


═══════════════════════════════════════════════════════════
            ВСЁ ГОТОВО К ДЕМОНСТРАЦИИ v2.0! 🎉🚀
       (С АВТОРАСПРЕДЕЛЕНИЕМ И ФОНОВЫМ ТЕСТИРОВАНИЕМ!)
═══════════════════════════════════════════════════════════
