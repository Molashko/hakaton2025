import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
import uuid
import os
import sqlite3

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–ò–° - –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫",
    page_icon="üè¢",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .section-header {
        font-size: 1.5rem;
        font-weight: bold;
        color: #2c3e50;
        margin-top: 2rem;
        margin-bottom: 1rem;
        border-bottom: 2px solid #3498db;
        padding-bottom: 0.5rem;
    }
    .card {
        background-color: transparent;
        padding: 0;
        border: none;
        margin: 0;
        box-shadow: none;
    }
    .parameter-row {
        display: flex;
        align-items: center;
        margin: 0.5rem 0;
        padding: 0.5rem;
        background-color: #f8f9fa;
        border-radius: 0.25rem;
    }
    .add-button {
        background-color: #28a745;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 0.25rem;
        cursor: pointer;
        margin: 0.5rem 0;
    }
    .delete-button {
        background-color: #dc3545;
        color: white;
        border: none;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        cursor: pointer;
        margin-left: 0.5rem;
    }
    .success-message {
        background-color: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 0.5rem;
        border: 1px solid #c3e6cb;
        margin: 1rem 0;
    }
    .metric-card {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #3498db;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ: SQLite
DB_PATH = os.environ.get('SQLITE_PATH', os.path.join(os.path.dirname(__file__), 'ais.db'))

def get_sqlite_conn():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_sqlite():
    conn = get_sqlite_conn()
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS tasks (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        description TEXT,
        status TEXT DEFAULT '–ù–æ–≤–∞—è',
        created_at TEXT,
        data TEXT
    )
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS executors (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        email TEXT NOT NULL,
        phone TEXT,
        status TEXT DEFAULT '–ê–∫—Ç–∏–≤–µ–Ω',
        active INTEGER DEFAULT 1,
        created_at TEXT,
        data TEXT
    )
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS assignments (
        id TEXT PRIMARY KEY,
        task_id TEXT,
        executor_id TEXT,
        assigned_at TEXT,
        status TEXT DEFAULT '–ù–∞–∑–Ω–∞—á–µ–Ω–∞',
        score REAL
    )
    """)
    conn.commit()
    conn.close()

def _json_dumps(obj):
    try:
        return json.dumps(obj, ensure_ascii=False)
    except Exception:
        return '{}'

def _json_loads(s):
    if not s:
        return {}
    try:
        return json.loads(s)
    except Exception:
        return {}

def load_tasks_from_db():
    conn = get_sqlite_conn()
    cur = conn.cursor()
    cur.execute("SELECT id,name,description,status,created_at,data FROM tasks ORDER BY datetime(created_at) DESC")
    rows = cur.fetchall()
    conn.close()
    tasks = []
    for r in rows:
        t = {
            'id': r['id'],
            'name': r['name'],
            'description': r['description'],
            'status': r['status'],
            'created_at': r['created_at'] or datetime.now().isoformat()
        }
        t.update(_json_loads(r['data']))
        tasks.append(t)
    return tasks

def load_executors_from_db():
    conn = get_sqlite_conn()
    cur = conn.cursor()
    cur.execute("SELECT id,name,email,phone,status,active,created_at,data FROM executors ORDER BY datetime(created_at) DESC")
    rows = cur.fetchall()
    conn.close()
    executors = []
    for r in rows:
        e = {
            'id': r['id'],
            'name': r['name'],
            'email': r['email'],
            'phone': r['phone'],
            'status': r['status'],
            'active': bool(r['active']),
            'created_at': r['created_at'] or datetime.now().isoformat()
        }
        e.update(_json_loads(r['data']))
        executors.append(e)
    return executors

def load_assignments_from_db():
    conn = get_sqlite_conn()
    cur = conn.cursor()
    cur.execute("SELECT id,task_id,executor_id,assigned_at,status,score FROM assignments ORDER BY datetime(assigned_at) DESC")
    rows = cur.fetchall()
    conn.close()
    return [{
        'id': r['id'],
        'task_id': r['task_id'],
        'executor_id': r['executor_id'],
        'assigned_at': r['assigned_at'] or datetime.now().isoformat(),
        'status': r['status'],
        'score': r['score'] if r['score'] is not None else 0.0
    } for r in rows]

def save_task_to_db(task):
    conn = get_sqlite_conn()
    cur = conn.cursor()
    base_keys = ['id','name','description','status','created_at']
    data = {k: v for k, v in task.items() if k not in base_keys}
    cur.execute("""
        INSERT INTO tasks(id,name,description,status,created_at,data)
        VALUES(?,?,?,?,?,?)
        ON CONFLICT(id) DO UPDATE SET
            name=excluded.name,
            description=excluded.description,
            status=excluded.status,
            created_at=excluded.created_at,
            data=excluded.data
    """, (
        task['id'], task['name'], task.get('description',''), task.get('status','–ù–æ–≤–∞—è'), task['created_at'], _json_dumps(data)
    ))
    conn.commit()
    conn.close()
    return True

def save_executor_to_db(executor):
    conn = get_sqlite_conn()
    cur = conn.cursor()
    base_keys = ['id','name','email','phone','status','active','created_at']
    data = {k: v for k, v in executor.items() if k not in base_keys}
    cur.execute("""
        INSERT INTO executors(id,name,email,phone,status,active,created_at,data)
        VALUES(?,?,?,?,?,?,?,?)
        ON CONFLICT(id) DO UPDATE SET
            name=excluded.name,
            email=excluded.email,
            phone=excluded.phone,
            status=excluded.status,
            active=excluded.active,
            created_at=excluded.created_at,
            data=excluded.data
    """, (
        executor['id'], executor['name'], executor['email'], executor.get('phone',''), executor.get('status','–ê–∫—Ç–∏–≤–µ–Ω'), 1 if executor.get('active', True) else 0, executor['created_at'], _json_dumps(data)
    ))
    conn.commit()
    conn.close()
    return True

def save_assignment_to_db(assignment):
    conn = get_sqlite_conn()
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO assignments(id,task_id,executor_id,assigned_at,status,score)
        VALUES(?,?,?,?,?,?)
        ON CONFLICT(id) DO UPDATE SET
            task_id=excluded.task_id,
            executor_id=excluded.executor_id,
            assigned_at=excluded.assigned_at,
            status=excluded.status,
            score=excluded.score
    """, (
        assignment['id'], assignment['task_id'], assignment['executor_id'], assignment['assigned_at'], assignment.get('status','–ù–∞–∑–Ω–∞—á–µ–Ω–∞'), assignment.get('score', 0.0)
    ))
    conn.commit()
    conn.close()
    return True

def delete_task_from_db(task_id):
    conn = get_sqlite_conn()
    cur = conn.cursor()
    cur.execute("DELETE FROM assignments WHERE task_id=?", (task_id,))
    cur.execute("DELETE FROM tasks WHERE id=?", (task_id,))
    conn.commit()
    conn.close()
    return True

def delete_executor_from_db(executor_id):
    conn = get_sqlite_conn()
    cur = conn.cursor()
    cur.execute("DELETE FROM assignments WHERE executor_id=?", (executor_id,))
    cur.execute("DELETE FROM executors WHERE id=?", (executor_id,))
    conn.commit()
    conn.close()
    return True

def clear_tasks_in_db():
    conn = get_sqlite_conn()
    cur = conn.cursor()
    cur.execute("DELETE FROM assignments")
    cur.execute("DELETE FROM tasks")
    conn.commit()
    conn.close()
    return True

def clear_executors_in_db():
    conn = get_sqlite_conn()
    cur = conn.cursor()
    cur.execute("DELETE FROM assignments")
    cur.execute("DELETE FROM executors")
    conn.commit()
    conn.close()
    return True

def clear_all_data_in_db():
    conn = get_sqlite_conn()
    cur = conn.cursor()
    cur.execute("DELETE FROM assignments")
    cur.execute("DELETE FROM tasks")
    cur.execute("DELETE FROM executors")
    conn.commit()
    conn.close()
    return True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
def init_session_state():
    if 'db_initialized' not in st.session_state:
        init_sqlite()
        st.session_state.db_initialized = True
    if 'tasks' not in st.session_state:
        st.session_state.tasks = load_tasks_from_db()
    if 'executors' not in st.session_state:
        st.session_state.executors = load_executors_from_db()
    if 'assignments' not in st.session_state:
        st.session_state.assignments = load_assignments_from_db()
    if 'task_parameters' not in st.session_state:
        st.session_state.task_parameters = [
            {'name': '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', 'type': '–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞', 'options': ['–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'], 'weight': 2.0},
            {'name': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', 'type': '–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞', 'options': ['IT', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥'], 'weight': 1.5},
            {'name': '–°–ª–æ–∂–Ω–æ—Å—Ç—å', 'type': '–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞', 'options': ['–ü—Ä–æ—Å—Ç–∞—è', '–°—Ä–µ–¥–Ω—è—è', '–°–ª–æ–∂–Ω–∞—è', '–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è'], 'weight': 1.8},
            {'name': '–ë—é–¥–∂–µ—Ç', 'type': '–ß–∏—Å–ª–æ', 'options': [], 'weight': 1.0},
            {'name': '–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', 'type': '–î–∞—Ç–∞', 'options': [], 'weight': 1.2}
        ]
    if 'executor_parameters' not in st.session_state:
        st.session_state.executor_parameters = [
            {'name': '–ù–∞–≤—ã–∫–∏', 'type': '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä', 'options': ['Python', 'JavaScript', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤', '–ü—Ä–æ–¥–∞–∂–∏'], 'weight': 2.0},
            {'name': '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', 'type': '–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞', 'options': ['–î–æ 1 –≥–æ–¥–∞', '1-3 –≥–æ–¥–∞', '3-5 –ª–µ—Ç', '5-10 –ª–µ—Ç', '–ë–æ–ª–µ–µ 10 –ª–µ—Ç'], 'weight': 1.8},
            {'name': '–†–µ–π—Ç–∏–Ω–≥', 'type': '–°–ª–∞–π–¥–µ—Ä', 'options': [1, 5], 'weight': 1.5},
            {'name': '–û—Ç–¥–µ–ª', 'type': '–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞', 'options': ['IT', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥'], 'weight': 1.3},
            {'name': '–ú–∞–∫—Å–∏–º—É–º –∑–∞—è–≤–æ–∫ –≤ –¥–µ–Ω—å', 'type': '–ß–∏—Å–ª–æ', 'options': [], 'weight': 1.0}
        ]

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def render_header():
    st.markdown('<h1 class="main-header">üè¢ –ê–ò–° - –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫</h1>', unsafe_allow_html=True)
    st.markdown("""
    <div style="text-align: center; color: #7f8c8d; margin-bottom: 2rem;">
        –ü—Ä–æ—Å—Ç–∞—è –∏ –ø–æ–Ω—è—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –º–µ–∂–¥—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏<br>
        –ù–∏–∫–∞–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ —É–¥–æ–±–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏ –∫–Ω–æ–ø–∫–∏
    </div>
    """, unsafe_allow_html=True)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def render_main_menu():
    st.sidebar.markdown("## üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "dashboard"
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    current_page = st.session_state.current_page
    
    if st.sidebar.button("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", use_container_width=True, type="primary" if current_page == "dashboard" else "secondary"):
        st.session_state.current_page = "dashboard"
        st.rerun()
    
    if st.sidebar.button("üìù –ó–∞—è–≤–∫–∏", use_container_width=True, type="primary" if current_page == "tasks" else "secondary"):
        st.session_state.current_page = "tasks"
        st.rerun()
    
    if st.sidebar.button("üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏", use_container_width=True, type="primary" if current_page == "executors" else "secondary"):
        st.session_state.current_page = "executors"
        st.rerun()
    
    if st.sidebar.button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", use_container_width=True, type="primary" if current_page == "parameters" else "secondary"):
        st.session_state.current_page = "parameters"
        st.rerun()
    
    if st.sidebar.button("üìà –û—Ç—á–µ—Ç—ã", use_container_width=True, type="primary" if current_page == "reports" else "secondary"):
        st.session_state.current_page = "reports"
        st.rerun()
    
    if st.sidebar.button("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π", use_container_width=True, type="primary" if current_page == "settings" else "secondary"):
        st.session_state.current_page = "settings"
        st.rerun()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return st.session_state.current_page

# –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
def _aggregate_per_minute(items, timestamp_key, window_minutes=5):
    now = datetime.now()
    start = now - timedelta(minutes=window_minutes)
    buckets = {}
    for i in range(window_minutes + 1):
        t = (start + timedelta(minutes=i)).replace(second=0, microsecond=0)
        buckets[t] = 0
    for it in items:
        try:
            ts = datetime.fromisoformat(it.get(timestamp_key, now.isoformat()))
            ts0 = ts.replace(second=0, microsecond=0)
            if ts0 >= start:
                buckets[ts0] = buckets.get(ts0, 0) + 1
        except Exception:
            pass
    times = sorted(buckets.keys())
    return pd.DataFrame({
        '–ú–∏–Ω—É—Ç–∞': [t.strftime('%H:%M') for t in times],
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [buckets[t] for t in times],
    })


def render_dashboard():
    st.markdown('<h2 class="section-header">üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>', unsafe_allow_html=True)

    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –ø—Ä–∏ –≤–∫–ª—é—á—ë–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ-—Ä–µ—Ñ—Ä–µ—à
    auto_refresh_enabled = st.session_state.get('auto_refresh', True)
    if auto_refresh_enabled:
        # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π –º–µ—Ç—Ä–∏–∫
        st.session_state.tasks = load_tasks_from_db()
        st.session_state.executors = load_executors_from_db()
        st.session_state.assignments = load_assignments_from_db()
        # –ú—è–≥–∫–∏–π –∞–≤—Ç–æ–æ–±–Ω–æ–≤–∏—Ç–µ–ª—å: –ø—Ä–æ–±—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É, –∏–Ω–∞—á–µ fallback
        try:
            from streamlit_autorefresh import st_autorefresh
            st_autorefresh(interval=2000, limit=None, key="ais_realtime")
        except Exception:
            st.markdown('<meta http-equiv="refresh" content="2">', unsafe_allow_html=True)
    
    # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="üìù –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫",
            value=len(st.session_state.tasks),
            delta=f"+{len([t for t in st.session_state.tasks if t.get('status') == '–ù–æ–≤–∞—è'])} –Ω–æ–≤—ã—Ö"
        )
    
    with col2:
        st.metric(
            label="üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π",
            value=len([e for e in st.session_state.executors if e.get('active', True)]),
            delta=f"{len([e for e in st.session_state.executors if e.get('active', True)])} –∞–∫—Ç–∏–≤–Ω—ã—Ö"
        )
    
    with col3:
        assigned_tasks = len([t for t in st.session_state.tasks if t.get('status') == '–ù–∞–∑–Ω–∞—á–µ–Ω–∞'])
        st.metric(
            label="‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
            value=assigned_tasks,
            delta=f"{assigned_tasks/len(st.session_state.tasks)*100:.1f}%" if st.session_state.tasks else "0%"
        )
    
    with col4:
        active_executors = len([e for e in st.session_state.executors if e.get('active', True)])
        tasks_per_executor = len(st.session_state.tasks) / active_executors if active_executors > 0 else 0
        st.metric(
            label="üìä –ó–∞—è–≤–æ–∫ –Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
            value=f"{tasks_per_executor:.1f}",
            delta=f"{tasks_per_executor:.1f}"
        )
    
    # –ì—Ä–∞—Ñ–∏–∫–∏ (–Ω–æ–≤–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ, –±–µ–∑ —Å—Ç–∞—Ç—É—Å–æ–≤)
    col1, col2 = st.columns(2)
    with col1:
        st.markdown("### üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫ (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ)")
        category_counts = {}
        for t in st.session_state.tasks:
            c = t.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            category_counts[c] = category_counts.get(c, 0) + 1
        if category_counts:
            df_cat_all = pd.DataFrame({'–ö–∞—Ç–µ–≥–æ—Ä–∏—è': list(category_counts.keys()), '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': list(category_counts.values())})
            fig1 = px.pie(df_cat_all, values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', names='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', hole=0.35, color_discrete_sequence=px.colors.qualitative.Set3)
            fig1.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig1, use_container_width=True)

    with col2:
        st.markdown("### ‚ö° –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç)")
        df_assign_min = _aggregate_per_minute(st.session_state.assignments, 'assigned_at', window_minutes=5)
        fig2 = px.line(df_assign_min, x='–ú–∏–Ω—É—Ç–∞', y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', markers=True, color_discrete_sequence=['#2ca02c'])
        st.plotly_chart(fig2, use_container_width=True)

    col3, col4 = st.columns(2)
    with col3:
        st.markdown("### üèÜ –¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º")
        active_counts = []
        for e in st.session_state.executors:
            count = len([a for a in st.session_state.assignments if a.get('executor_id') == e['id']])
            active_counts.append({'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å': e['name'], '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–π': count})
        if active_counts:
            df_top = pd.DataFrame(active_counts).sort_values('–ù–∞–∑–Ω–∞—á–µ–Ω–∏–π', ascending=False).head(10)
            fig3 = px.bar(df_top, x='–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', y='–ù–∞–∑–Ω–∞—á–µ–Ω–∏–π', color='–ù–∞–∑–Ω–∞—á–µ–Ω–∏–π', color_continuous_scale='Blues')
            fig3.update_layout(xaxis_tickangle=-30)
            st.plotly_chart(fig3, use_container_width=True)

    with col4:
        st.markdown("### ‚è± –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç)")
        df_tasks_min = _aggregate_per_minute(st.session_state.tasks, 'created_at', window_minutes=5)
        fig4 = px.line(df_tasks_min, x='–ú–∏–Ω—É—Ç–∞', y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', markers=True)
        st.plotly_chart(fig4, use_container_width=True)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏
def render_tasks_management():
    st.markdown('<h2 class="section-header">üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏</h2>', unsafe_allow_html=True)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    editing_task_id = None
    for task in st.session_state.tasks:
        if st.session_state.get(f"editing_task_{task['id']}", False):
            editing_task_id = task['id']
            break
    
    if editing_task_id:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–∏
        task_to_edit = next(t for t in st.session_state.tasks if t['id'] == editing_task_id)
        st.markdown("### ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É")
        
        col1, col2 = st.columns(2)
        
        with col1:
            task_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏", value=task_to_edit['name'], key="edit_task_name")
            task_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ", value=task_to_edit['description'], key="edit_task_description")
        
        with col2:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—è–≤–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            task_data = {}
            for param in st.session_state.task_parameters:
                current_value = task_to_edit.get(param['name'], '')
                if param['type'] == '–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞':
                    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                    try:
                        index = param['options'].index(current_value)
                    except ValueError:
                        index = 0
                    task_data[param['name']] = st.selectbox(param['name'], param['options'], index=index, key=f"edit_{param['name']}")
                elif param['type'] == '–ß–∏—Å–ª–æ':
                    task_data[param['name']] = st.number_input(param['name'], min_value=0, value=current_value, key=f"edit_{param['name']}")
                elif param['type'] == '–î–∞—Ç–∞':
                    if isinstance(current_value, str):
                        current_date = datetime.fromisoformat(current_value).date()
                    else:
                        current_date = current_value
                    task_data[param['name']] = st.date_input(param['name'], value=current_date, min_value=datetime.now().date(), key=f"edit_{param['name']}")
                elif param['type'] == '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä':
                    task_data[param['name']] = st.multiselect(param['name'], param['options'], default=current_value, key=f"edit_{param['name']}")
        
        st.markdown("---")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary"):
                if task_name and task_description:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
                    task_to_edit['name'] = task_name
                    task_to_edit['description'] = task_description
                    task_to_edit.update(task_data)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SQLite
                    save_task_to_db(task_to_edit)
                    st.session_state[f"editing_task_{editing_task_id}"] = False
                    st.session_state.tasks = load_tasks_from_db()
                    st.success("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                    st.rerun()
                else:
                    st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        
        with col2:
            if st.button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", type="secondary"):
                st.session_state[f"editing_task_{editing_task_id}"] = False
                st.rerun()
        
        with col3:
            if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", type="secondary"):
                delete_task_from_db(editing_task_id)
                st.session_state.tasks = load_tasks_from_db()
                st.session_state.assignments = load_assignments_from_db()
                st.session_state[f"editing_task_{editing_task_id}"] = False
                st.success("‚úÖ –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
                st.rerun()
        
        return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
    st.markdown("### ‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.markdown("#### üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    col1, col2 = st.columns(2)
    
    with col1:
        task_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")
        task_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ", placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")
    
    with col2:
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—è–≤–∫–∏
        task_data = {}
        for param in st.session_state.task_parameters:
            if param['type'] == '–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞':
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
                if param['name'] == '–ö–∞—Ç–µ–≥–æ—Ä–∏—è':
                    # –î–æ–±–∞–≤–ª—è–µ–º "–î—Ä—É–≥–æ–µ" –≤ –æ–ø—Ü–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                    options = param['options'].copy()
                    if '–î—Ä—É–≥–æ–µ' not in options:
                        options.append('–î—Ä—É–≥–æ–µ')
                    
                    selected_category = st.selectbox(param['name'], options)
                    
                    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–î—Ä—É–≥–æ–µ", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞
                    if selected_category == '–î—Ä—É–≥–æ–µ':
                        other_category = st.text_input("–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                        if other_category:
                            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –æ–ø—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                            if other_category not in param['options']:
                                param['options'].append(other_category)
                            task_data[param['name']] = other_category
                        else:
                            task_data[param['name']] = '–î—Ä—É–≥–æ–µ'
                    else:
                        task_data[param['name']] = selected_category
                else:
                    task_data[param['name']] = st.selectbox(param['name'], param['options'])
            elif param['type'] == '–ß–∏—Å–ª–æ':
                task_data[param['name']] = st.number_input(param['name'], min_value=0, value=100000)
            elif param['type'] == '–î–∞—Ç–∞':
                task_data[param['name']] = st.date_input(param['name'], min_value=datetime.now().date())
            elif param['type'] == '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä':
                task_data[param['name']] = st.multiselect(param['name'], param['options'])
    
    st.markdown("---")
    
    if st.button("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", type="primary"):
        if task_name and task_description:
            new_task = {
                'id': str(uuid.uuid4()),
                'name': task_name,
                'description': task_description,
                'status': '–ù–æ–≤–∞—è',
                'created_at': datetime.now().isoformat(),
                **task_data
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SQLite
            save_task_to_db(new_task)
            st.session_state.tasks = load_tasks_from_db()
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
            best_executor = find_best_executor(new_task)
            if best_executor:
                assignment = {
                    'id': str(uuid.uuid4()),
                    'task_id': new_task['id'],
                    'executor_id': best_executor['id'],
                    'assigned_at': datetime.now().isoformat(),
                    'score': calculate_match_score(new_task, best_executor)
                }
                save_assignment_to_db(assignment)
                new_task['status'] = '–ù–∞–∑–Ω–∞—á–µ–Ω–∞'
                new_task['assigned_to'] = best_executor['name']
                save_task_to_db(new_task)
            
            st.success("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!")
            st.rerun()
        else:
            st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
    
    # –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
    st.markdown("### üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫")
    
    if st.session_state.tasks:
        # –§–∏–ª—å—Ç—Ä—ã
        col1, col2, col3 = st.columns(3)
        with col1:
            status_filter = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É", ["–í—Å–µ", "–ù–æ–≤–∞—è", "–ù–∞–∑–Ω–∞—á–µ–Ω–∞", "–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"])
        with col2:
            category_filter = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", ["–í—Å–µ"] + [param['options'] for param in st.session_state.task_parameters if param['name'] == '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'][0])
        with col3:
            priority_filter = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É", ["–í—Å–µ"] + [param['options'] for param in st.session_state.task_parameters if param['name'] == '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç'][0])
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
        filtered_tasks = st.session_state.tasks
        if status_filter != "–í—Å–µ":
            filtered_tasks = [t for t in filtered_tasks if t.get('status') == status_filter]
        if category_filter != "–í—Å–µ":
            filtered_tasks = [t for t in filtered_tasks if t.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è') == category_filter]
        if priority_filter != "–í—Å–µ":
            filtered_tasks = [t for t in filtered_tasks if t.get('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç') == priority_filter]
        
        for i, task in enumerate(filtered_tasks):
            with st.container():
                col1, col2, col3 = st.columns([3, 1, 1])
                
                with col1:
                    st.markdown(f"**{task['name']}**")
                    st.markdown(f"*{task['description']}*")
                    
                    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—è–≤–∫–∏
                    params_text = []
                    for param in st.session_state.task_parameters:
                        if param['name'] in task and task[param['name']]:
                            if param['type'] == '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä':
                                params_text.append(f"**{param['name']}:** {', '.join(task[param['name']])}")
                            else:
                                params_text.append(f"**{param['name']}:** {task[param['name']]}")
                    
                    if params_text:
                        st.markdown(" | ".join(params_text))
                    
                    st.markdown(f"**–°—Ç–∞—Ç—É—Å:** {task['status']} | **–°–æ–∑–¥–∞–Ω–∞:** {task['created_at'][:19]}")
                    
                    if 'assigned_to' in task:
                        st.markdown(f"**–ù–∞–∑–Ω–∞—á–µ–Ω–∞:** {task['assigned_to']}")
                
                with col2:
                    if st.button(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_{task['id']}"):
                        st.session_state[f"editing_task_{task['id']}"] = True
                        st.rerun()
                
                with col3:
                    if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{task['id']}"):
                        delete_task_from_db(task['id'])
                        st.session_state.tasks = load_tasks_from_db()
                        st.session_state.assignments = load_assignments_from_db()
                        st.success("‚úÖ –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
                        st.rerun()
                
                st.markdown("---")
    else:
        st.info("üìù –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É –≤—ã—à–µ.")

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
def render_executors_management():
    st.markdown('<h2 class="section-header">üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏</h2>', unsafe_allow_html=True)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    editing_executor_id = None
    for executor in st.session_state.executors:
        if st.session_state.get(f"editing_executor_{executor['id']}", False):
            editing_executor_id = executor['id']
            break
    
    if editing_executor_id:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        executor_to_edit = next(e for e in st.session_state.executors if e['id'] == editing_executor_id)
        st.markdown("### ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        
        col1, col2 = st.columns(2)
        
        with col1:
            executor_name = st.text_input("–ò–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", value=executor_to_edit['name'], key="edit_executor_name")
            executor_email = st.text_input("Email", value=executor_to_edit['email'], key="edit_executor_email")
            phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω", value=executor_to_edit.get('phone', ''), key="edit_executor_phone")
        
        with col2:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            executor_data = {}
            for param in st.session_state.executor_parameters:
                current_value = executor_to_edit.get(param['name'], '')
                if param['type'] == '–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞':
                    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                    try:
                        index = param['options'].index(current_value)
                    except ValueError:
                        index = 0
                    executor_data[param['name']] = st.selectbox(param['name'], param['options'], index=index, key=f"edit_exec_{param['name']}")
                elif param['type'] == '–ß–∏—Å–ª–æ':
                    executor_data[param['name']] = st.number_input(param['name'], min_value=1, max_value=50, value=current_value, key=f"edit_exec_{param['name']}")
                elif param['type'] == '–°–ª–∞–π–¥–µ—Ä':
                    executor_data[param['name']] = st.slider(param['name'], param['options'][0], param['options'][1], current_value, key=f"edit_exec_{param['name']}")
                elif param['type'] == '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä':
                    executor_data[param['name']] = st.multiselect(param['name'], param['options'], default=current_value, key=f"edit_exec_{param['name']}")
        
        st.markdown("---")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary"):
                if executor_name and executor_email:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                    executor_to_edit['name'] = executor_name
                    executor_to_edit['email'] = executor_email
                    executor_to_edit['phone'] = phone
                    executor_to_edit.update(executor_data)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SQLite
                    save_executor_to_db(executor_to_edit)
                    st.session_state[f"editing_executor_{editing_executor_id}"] = False
                    st.session_state.executors = load_executors_from_db()
                    st.success("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    st.rerun()
                else:
                    st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        
        with col2:
            if st.button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", type="secondary"):
                st.session_state[f"editing_executor_{editing_executor_id}"] = False
                st.rerun()
        
        with col3:
            if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", type="secondary"):
                delete_executor_from_db(editing_executor_id)
                st.session_state.executors = load_executors_from_db()
                st.session_state.assignments = load_assignments_from_db()
                st.session_state[f"editing_executor_{editing_executor_id}"] = False
                st.success("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!")
                st.rerun()
        
        return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    st.markdown("### ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.markdown("#### üë§ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    col1, col2 = st.columns(2)
    
    with col1:
        executor_name = st.text_input("–ò–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        executor_email = st.text_input("Email", placeholder="email@example.com")
        phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω", placeholder="+7 (999) 123-45-67")
    
    with col2:
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        executor_data = {}
        for param in st.session_state.executor_parameters:
            if param['type'] == '–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞':
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "–û—Ç–¥–µ–ª"
                if param['name'] == '–û—Ç–¥–µ–ª':
                    # –î–æ–±–∞–≤–ª—è–µ–º "–î—Ä—É–≥–æ–µ" –≤ –æ–ø—Ü–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                    options = param['options'].copy()
                    if '–î—Ä—É–≥–æ–µ' not in options:
                        options.append('–î—Ä—É–≥–æ–µ')
                    
                    selected_department = st.selectbox(param['name'], options)
                    
                    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–î—Ä—É–≥–æ–µ", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞
                    if selected_department == '–î—Ä—É–≥–æ–µ':
                        other_department = st.text_input("–£–∫–∞–∂–∏—Ç–µ –æ—Ç–¥–µ–ª", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞")
                        if other_department:
                            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–¥–µ–ª –≤ –æ–ø—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                            if other_department not in param['options']:
                                param['options'].append(other_department)
                            executor_data[param['name']] = other_department
                        else:
                            executor_data[param['name']] = '–î—Ä—É–≥–æ–µ'
                    else:
                        executor_data[param['name']] = selected_department
                else:
                    executor_data[param['name']] = st.selectbox(param['name'], param['options'])
            elif param['type'] == '–ß–∏—Å–ª–æ':
                executor_data[param['name']] = st.number_input(param['name'], min_value=1, max_value=50, value=10)
            elif param['type'] == '–°–ª–∞–π–¥–µ—Ä':
                executor_data[param['name']] = st.slider(param['name'], param['options'][0], param['options'][1], 3)
            elif param['type'] == '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä':
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "–ù–∞–≤—ã–∫–∏"
                if param['name'] == '–ù–∞–≤—ã–∫–∏':
                    # –î–æ–±–∞–≤–ª—è–µ–º "–î—Ä—É–≥–æ–µ" –≤ –æ–ø—Ü–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                    options = param['options'].copy()
                    if '–î—Ä—É–≥–æ–µ' not in options:
                        options.append('–î—Ä—É–≥–æ–µ')
                    
                    selected_skills = st.multiselect(param['name'], options)
                    
                    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–î—Ä—É–≥–æ–µ", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞
                    if '–î—Ä—É–≥–æ–µ' in selected_skills:
                        other_skill = st.text_input("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–≤—ã–∫", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞")
                        if other_skill:
                            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫ –≤ –æ–ø—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                            if other_skill not in param['options']:
                                param['options'].append(other_skill)
                            # –ó–∞–º–µ–Ω—è–µ–º "–î—Ä—É–≥–æ–µ" –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∞–≤—ã–∫
                            selected_skills = [skill for skill in selected_skills if skill != '–î—Ä—É–≥–æ–µ']
                            selected_skills.append(other_skill)
                        executor_data[param['name']] = selected_skills
                    else:
                        executor_data[param['name']] = selected_skills
                else:
                    executor_data[param['name']] = st.multiselect(param['name'], param['options'])
    
    st.markdown("---")
    
    if st.button("üë• –î–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", type="primary"):
        if executor_name and executor_email:
            new_executor = {
                'id': str(uuid.uuid4()),
                'name': executor_name,
                'email': executor_email,
                'phone': phone,
                'active': True,
                'created_at': datetime.now().isoformat(),
                **executor_data
            }
            save_executor_to_db(new_executor)
            st.session_state.executors = load_executors_from_db()
            st.success("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            st.rerun()
        else:
            st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
    
    # –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    st.markdown("### üë• –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
    
    if st.session_state.executors:
        for executor in st.session_state.executors:
            with st.container():
                col1, col2, col3 = st.columns([3, 1, 1])
                
                with col1:
                    status_color = "üü¢" if executor.get('active', True) else "üî¥"
                    st.markdown(f"**{status_color} {executor['name']}**")
                    st.markdown(f"**Email:** {executor['email']} | **–¢–µ–ª–µ—Ñ–æ–Ω:** {executor['phone']}")
                    
                    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                    params_text = []
                    for param in st.session_state.executor_parameters:
                        if param['name'] in executor and executor[param['name']]:
                            if param['type'] == '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä':
                                params_text.append(f"**{param['name']}:** {', '.join(executor[param['name']])}")
                            elif param['type'] == '–°–ª–∞–π–¥–µ—Ä':
                                stars = '‚≠ê' * executor[param['name']]
                                params_text.append(f"**{param['name']}:** {stars}")
                            else:
                                params_text.append(f"**{param['name']}:** {executor[param['name']]}")
                    
                    if params_text:
                        st.markdown(" | ".join(params_text))
                
                with col2:
                    if st.button(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_exec_{executor['id']}"):
                        st.session_state[f"editing_executor_{executor['id']}"] = True
                        st.rerun()
                
                with col3:
                    if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_exec_{executor['id']}"):
                        delete_executor_from_db(executor['id'])
                        st.session_state.executors = load_executors_from_db()
                        st.session_state.assignments = load_assignments_from_db()
                        st.success("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!")
                        st.rerun()
                
                st.markdown("---")
    else:
        st.info("üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤—ã—à–µ.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
def render_parameters_settings():
    st.markdown('<h2 class="section-header">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</h2>', unsafe_allow_html=True)
    
    st.markdown("""
    ### üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
    
    –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞—è–≤–æ–∫ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.
    –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!
    """)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—è–≤–æ–∫
    st.markdown("#### üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—è–≤–æ–∫")
    
    for i, param in enumerate(st.session_state.task_parameters):
        col1, col2, col3, col4, col5 = st.columns([2, 2, 1, 1, 1])
        
        with col1:
            new_name = st.text_input(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞", value=param['name'], key=f"task_param_name_{i}")
            if new_name != param['name']:
                st.session_state.task_parameters[i]['name'] = new_name
        
        with col2:
            new_type = st.selectbox(f"–¢–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞", ["–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞", "–ß–∏—Å–ª–æ", "–î–∞—Ç–∞", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä"], 
                                  index=["–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞", "–ß–∏—Å–ª–æ", "–î–∞—Ç–∞", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä"].index(param['type']), 
                                  key=f"task_param_type_{i}")
            if new_type != param['type']:
                st.session_state.task_parameters[i]['type'] = new_type
                # –û—á–∏—â–∞–µ–º –æ–ø—Ü–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞
                st.session_state.task_parameters[i]['options'] = []
        
        with col3:
            weight = st.number_input(f"–í–µ—Å", value=param['weight'], min_value=0.1, max_value=5.0, step=0.1, key=f"task_param_weight_{i}")
            st.session_state.task_parameters[i]['weight'] = weight
        
        with col4:
            if st.button("‚öôÔ∏è", key=f"edit_task_param_{i}", help="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ü–∏–∏"):
                st.session_state[f"editing_task_param_{i}"] = True
                st.rerun()
        
        with col5:
            if st.button("üóëÔ∏è", key=f"del_task_param_{i}"):
                st.session_state.task_parameters.pop(i)
                st.rerun()
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        if st.session_state.get(f"editing_task_param_{i}", False):
            st.markdown(f"**–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ü–∏–π –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {param['name']}**")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–ø—Ü–∏–∏
            current_options = param.get('options', [])
            st.markdown("**–¢–µ–∫—É—â–∏–µ –æ–ø—Ü–∏–∏:**")
            for j, option in enumerate(current_options):
                col_a, col_b = st.columns([3, 1])
                with col_a:
                    st.text_input(f"–û–ø—Ü–∏—è {j+1}", value=option, key=f"task_option_{i}_{j}")
                with col_b:
                    if st.button("üóëÔ∏è", key=f"del_task_option_{i}_{j}"):
                        current_options.pop(j)
                        st.session_state.task_parameters[i]['options'] = current_options
                        st.rerun()
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –æ–ø—Ü–∏–∏
            col_a, col_b = st.columns([3, 1])
            with col_a:
                new_option = st.text_input("–ù–æ–≤–∞—è –æ–ø—Ü–∏—è", key=f"new_task_option_{i}")
            with col_b:
                if st.button("‚ûï", key=f"add_task_option_{i}"):
                    if new_option and new_option not in current_options:
                        current_options.append(new_option)
                        st.session_state.task_parameters[i]['options'] = current_options
                        st.rerun()
            
            col_a, col_b = st.columns(2)
            with col_a:
                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key=f"save_task_param_{i}"):
                    st.session_state[f"editing_task_param_{i}"] = False
                    st.rerun()
            with col_b:
                if st.button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", key=f"cancel_task_param_{i}"):
                    st.session_state[f"editing_task_param_{i}"] = False
                    st.rerun()
            
            st.markdown("---")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏
    st.markdown("---")
    st.markdown("#### ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞—è–≤–∫–∏")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        new_param_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞", key="new_task_param_name")
    with col2:
        new_param_type = st.selectbox("–¢–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞", ["–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞", "–ß–∏—Å–ª–æ", "–î–∞—Ç–∞", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä"], key="new_task_param_type")
    with col3:
        new_param_weight = st.number_input("–í–µ—Å", min_value=0.1, max_value=5.0, step=0.1, value=1.0, key="new_task_param_weight")
    
    if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞—è–≤–∫–∏"):
        if new_param_name:
            new_param = {
                'name': new_param_name,
                'type': new_param_type,
                'options': [],
                'weight': new_param_weight
            }
            st.session_state.task_parameters.append(new_param)
            st.success(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä '{new_param_name}' –¥–æ–±–∞–≤–ª–µ–Ω!")
            st.rerun()
    
    st.markdown("---")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    st.markdown("#### üë• –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
    
    for i, param in enumerate(st.session_state.executor_parameters):
        col1, col2, col3, col4, col5 = st.columns([2, 2, 1, 1, 1])
        
        with col1:
            new_name = st.text_input(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞", value=param['name'], key=f"exec_param_name_{i}")
            if new_name != param['name']:
                st.session_state.executor_parameters[i]['name'] = new_name
        
        with col2:
            new_type = st.selectbox(f"–¢–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞", ["–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞", "–ß–∏—Å–ª–æ", "–°–ª–∞–π–¥–µ—Ä", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä"], 
                                  index=["–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞", "–ß–∏—Å–ª–æ", "–°–ª–∞–π–¥–µ—Ä", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä"].index(param['type']), 
                                  key=f"exec_param_type_{i}")
            if new_type != param['type']:
                st.session_state.executor_parameters[i]['type'] = new_type
                # –û—á–∏—â–∞–µ–º –æ–ø—Ü–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞
                st.session_state.executor_parameters[i]['options'] = []
        
        with col3:
            weight = st.number_input(f"–í–µ—Å", value=param['weight'], min_value=0.1, max_value=5.0, step=0.1, key=f"exec_param_weight_{i}")
            st.session_state.executor_parameters[i]['weight'] = weight
        
        with col4:
            if st.button("‚öôÔ∏è", key=f"edit_exec_param_{i}", help="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ü–∏–∏"):
                st.session_state[f"editing_exec_param_{i}"] = True
                st.rerun()
        
        with col5:
            if st.button("üóëÔ∏è", key=f"del_exec_param_{i}"):
                st.session_state.executor_parameters.pop(i)
                st.rerun()
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        if st.session_state.get(f"editing_exec_param_{i}", False):
            st.markdown(f"**–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ü–∏–π –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {param['name']}**")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–ø—Ü–∏–∏
            current_options = param.get('options', [])
            st.markdown("**–¢–µ–∫—É—â–∏–µ –æ–ø—Ü–∏–∏:**")
            for j, option in enumerate(current_options):
                col_a, col_b = st.columns([3, 1])
                with col_a:
                    st.text_input(f"–û–ø—Ü–∏—è {j+1}", value=option, key=f"exec_option_{i}_{j}")
                with col_b:
                    if st.button("üóëÔ∏è", key=f"del_exec_option_{i}_{j}"):
                        current_options.pop(j)
                        st.session_state.executor_parameters[i]['options'] = current_options
                        st.rerun()
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –æ–ø—Ü–∏–∏
            col_a, col_b = st.columns([3, 1])
            with col_a:
                new_option = st.text_input("–ù–æ–≤–∞—è –æ–ø—Ü–∏—è", key=f"new_exec_option_{i}")
            with col_b:
                if st.button("‚ûï", key=f"add_exec_option_{i}"):
                    if new_option and new_option not in current_options:
                        current_options.append(new_option)
                        st.session_state.executor_parameters[i]['options'] = current_options
                        st.rerun()
            
            col_a, col_b = st.columns(2)
            with col_a:
                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key=f"save_exec_param_{i}"):
                    st.session_state[f"editing_exec_param_{i}"] = False
                    st.rerun()
            with col_b:
                if st.button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", key=f"cancel_exec_param_{i}"):
                    st.session_state[f"editing_exec_param_{i}"] = False
                    st.rerun()
            
            st.markdown("---")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    st.markdown("---")
    st.markdown("#### ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        new_param_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞", key="new_exec_param_name")
    with col2:
        new_param_type = st.selectbox("–¢–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞", ["–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞", "–ß–∏—Å–ª–æ", "–°–ª–∞–π–¥–µ—Ä", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä"], key="new_exec_param_type")
    with col3:
        new_param_weight = st.number_input("–í–µ—Å", min_value=0.1, max_value=5.0, step=0.1, value=1.0, key="new_exec_param_weight")
    
    if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"):
        if new_param_name:
            new_param = {
                'name': new_param_name,
                'type': new_param_type,
                'options': [],
                'weight': new_param_weight
            }
            st.session_state.executor_parameters.append(new_param)
            st.success(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä '{new_param_name}' –¥–æ–±–∞–≤–ª–µ–Ω!")
            st.rerun()
    
    st.markdown("---")

# –û—Ç—á–µ—Ç—ã
def render_reports():
    st.markdown('<h2 class="section-header">üìà –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h2>', unsafe_allow_html=True)
    
    if not st.session_state.tasks:
        st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤")
        return
    
    # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
    col1, col2 = st.columns(2)
    with col1:
        start_date = st.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", value=datetime.now().date() - timedelta(days=30))
    with col2:
        end_date = st.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", value=datetime.now().date())
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    st.markdown("### üìä –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_tasks = len(st.session_state.tasks)
        st.metric("–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫", total_tasks)
    
    with col2:
        completed_tasks = len([t for t in st.session_state.tasks if t.get('status') == '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'])
        completion_rate = (completed_tasks / total_tasks * 100) if total_tasks > 0 else 0
        st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", f"{completion_rate:.1f}%")
    
    with col3:
        active_executors = len([e for e in st.session_state.executors if e.get('active', True)])
        tasks_per_executor = total_tasks / active_executors if active_executors > 0 else 0
        st.metric("–ó–∞—è–≤–æ–∫ –Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", f"{tasks_per_executor:.1f}")
    
    with col4:
        avg_score = sum([a.get('score', 0) for a in st.session_state.assignments]) / len(st.session_state.assignments) if st.session_state.assignments else 0
        st.metric("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è", f"{avg_score:.1f}")
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        category_counts = {}
        for task in st.session_state.tasks:
            category = task.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            category_counts[category] = category_counts.get(category, 0) + 1
        
        if category_counts:
            fig = px.pie(
                values=list(category_counts.values()),
                names=list(category_counts.keys()),
                title="–ó–∞—è–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
            )
            st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.markdown("### üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
        executor_scores = {}
        for assignment in st.session_state.assignments:
            executor_id = assignment.get('executor_id')
            score = assignment.get('score', 0)
            if executor_id not in executor_scores:
                executor_scores[executor_id] = []
            executor_scores[executor_id].append(score)
        
        if executor_scores:
            avg_scores = {executor_id: sum(scores)/len(scores) for executor_id, scores in executor_scores.items()}
            executor_names = {executor['id']: executor['name'] for executor in st.session_state.executors}
            
            df = pd.DataFrame([
                {'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å': executor_names.get(executor_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'), '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª': avg_score}
                for executor_id, avg_score in avg_scores.items()
            ])
            
            fig = px.bar(df, x='–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', y='–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª', title='–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è')
            fig.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig, use_container_width=True)
    
    # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    st.markdown("### üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    if st.session_state.tasks:
        csv_data = pd.DataFrame(st.session_state.tasks).to_csv(index=False)
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –≤ CSV",
            data=csv_data,
            file_name=f"tasks_report_{start_date}_{end_date}.csv",
            mime="text/csv"
        )

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π
def render_settings():
    st.markdown('<h2 class="section-header">üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π</h2>', unsafe_allow_html=True)
    
    st.markdown("### ‚öôÔ∏è –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
        auto_assignment = st.checkbox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫", value=True)
        fairness_threshold = st.slider("–ü–æ—Ä–æ–≥ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏", 0.0, 1.0, 0.8, 0.1)
    
    with col2:
        st.markdown("#### üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤")
        default_period = st.selectbox("–ü–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", ["7 –¥–Ω–µ–π", "30 –¥–Ω–µ–π", "90 –¥–Ω–µ–π", "1 –≥–æ–¥"])
        auto_refresh = st.checkbox("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞", value=st.session_state.get('auto_refresh', True))
        st.session_state.auto_refresh = auto_refresh
    
    # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    st.markdown("### üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏", type="secondary"):
            st.session_state.tasks = []
            st.session_state.assignments = []
            st.success("‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ —É–¥–∞–ª–µ–Ω—ã!")
            st.rerun()
    
    with col2:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", type="secondary"):
            st.session_state.executors = []
            st.session_state.assignments = []
            st.success("‚úÖ –í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã!")
            st.rerun()
    
    with col3:
        if st.button("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", type="secondary"):
            st.session_state.task_parameters = [
                {'name': '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', 'type': '–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞', 'options': ['–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'], 'weight': 2.0},
                {'name': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', 'type': '–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞', 'options': ['IT', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥'], 'weight': 1.5},
                {'name': '–°–ª–æ–∂–Ω–æ—Å—Ç—å', 'type': '–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞', 'options': ['–ü—Ä–æ—Å—Ç–∞—è', '–°—Ä–µ–¥–Ω—è—è', '–°–ª–æ–∂–Ω–∞—è', '–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è'], 'weight': 1.8},
                {'name': '–ë—é–¥–∂–µ—Ç', 'type': '–ß–∏—Å–ª–æ', 'options': [], 'weight': 1.0},
                {'name': '–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', 'type': '–î–∞—Ç–∞', 'options': [], 'weight': 1.2}
            ]
            st.session_state.executor_parameters = [
                {'name': '–ù–∞–≤—ã–∫–∏', 'type': '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä', 'options': ['Python', 'JavaScript', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤', '–ü—Ä–æ–¥–∞–∂–∏'], 'weight': 2.0},
                {'name': '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', 'type': '–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞', 'options': ['–î–æ 1 –≥–æ–¥–∞', '1-3 –≥–æ–¥–∞', '3-5 –ª–µ—Ç', '5-10 –ª–µ—Ç', '–ë–æ–ª–µ–µ 10 –ª–µ—Ç'], 'weight': 1.8},
                {'name': '–†–µ–π—Ç–∏–Ω–≥', 'type': '–°–ª–∞–π–¥–µ—Ä', 'options': [1, 5], 'weight': 1.5},
                {'name': '–û—Ç–¥–µ–ª', 'type': '–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞', 'options': ['IT', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥'], 'weight': 1.3},
                {'name': '–ú–∞–∫—Å–∏–º—É–º –∑–∞—è–≤–æ–∫ –≤ –¥–µ–Ω—å', 'type': '–ß–∏—Å–ª–æ', 'options': [], 'weight': 1.0}
            ]
            st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!")
            st.rerun()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def find_best_executor(task):
    """–ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏"""
    active_executors = [e for e in st.session_state.executors if e.get('active', True)]
    if not active_executors:
        return None
    
    best_executor = None
    best_score = 0
    
    for executor in active_executors:
        score = calculate_match_score(task, executor)
        if score > best_score:
            best_score = score
            best_executor = executor
    
    return best_executor

def calculate_match_score(task, executor):
    """–†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞—è–≤–∫–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    score = 0
    
    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—Ç–¥–µ–ª–∞
    task_category = task.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
    executor_department = executor.get('–û—Ç–¥–µ–ª')
    
    if task_category == executor_department:
        score += 3.0
    
    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–≤—ã–∫–æ–≤
    task_skills = []
    if task_category == 'IT':
        if 'Python' in str(task.get('–ù–∞–≤—ã–∫–∏', '')):
            task_skills.append('Python')
        if 'JavaScript' in str(task.get('–ù–∞–≤—ã–∫–∏', '')):
            task_skills.append('JavaScript')
    elif task_category == '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ':
        task_skills = ['–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ']
    elif task_category == '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ':
        task_skills = ['–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤', '–ü—Ä–æ–¥–∞–∂–∏']
    elif task_category == '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥':
        task_skills = ['–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑', '–ü—Ä–æ—Ü–µ—Å—Å—ã']
    
    executor_skills = executor.get('–ù–∞–≤—ã–∫–∏', [])
    if isinstance(executor_skills, list):
        skill_matches = len(set(task_skills) & set(executor_skills))
        if task_skills:
            score += (skill_matches / len(task_skills)) * 2.0
    
    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –æ–ø—ã—Ç–∞
    complexity_experience_map = {
        '–ü—Ä–æ—Å—Ç–∞—è': ['–î–æ 1 –≥–æ–¥–∞', '1-3 –≥–æ–¥–∞'],
        '–°—Ä–µ–¥–Ω—è—è': ['1-3 –≥–æ–¥–∞', '3-5 –ª–µ—Ç'],
        '–°–ª–æ–∂–Ω–∞—è': ['3-5 –ª–µ—Ç', '5-10 –ª–µ—Ç'],
        '–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è': ['5-10 –ª–µ—Ç', '–ë–æ–ª–µ–µ 10 –ª–µ—Ç']
    }
    
    task_complexity = task.get('–°–ª–æ–∂–Ω–æ—Å—Ç—å')
    executor_experience = executor.get('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã')
    
    if executor_experience in complexity_experience_map.get(task_complexity, []):
        score += 1.5
    
    # –†–µ–π—Ç–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    executor_rating = executor.get('–†–µ–π—Ç–∏–Ω–≥', 3)
    score += executor_rating * 0.5
    
    # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (—á–µ–º –º–µ–Ω—å—à–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    assigned_count = len([a for a in st.session_state.assignments if a.get('executor_id') == executor['id']])
    capacity = executor.get('–ú–∞–∫—Å–∏–º—É–º –∑–∞—è–≤–æ–∫ –≤ –¥–µ–Ω—å', 10)
    availability_score = max(0, (capacity - assigned_count) / capacity)
    score += availability_score * 1.0
    
    return score

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_session_state()
    render_header()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    selected_page = render_main_menu()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if selected_page == "dashboard":
        render_dashboard()
    elif selected_page == "tasks":
        render_tasks_management()
    elif selected_page == "executors":
        render_executors_management()
    elif selected_page == "parameters":
        render_parameters_settings()
    elif selected_page == "reports":
        render_reports()
    elif selected_page == "settings":
        render_settings()

if __name__ == "__main__":
    main()