{
  "name": "Executor Balancer - PostgreSQL",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "orders",
        "responseMode": "responseNode"
      },
      "name": "Webhook - Create Order",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "functionCode": "// Обработка нового заказа\nconst order = items[0].json;\n\nif (!order.orderId || !order.customerId || !order.description) {\n  throw new Error('Недостаточно данных заказа');\n}\n\nconst executors = [\n  { id: 'executor1', name: 'Исполнитель 1', load: 0.3 },\n  { id: 'executor2', name: 'Исполнитель 2', load: 0.1 },\n  { id: 'executor3', name: 'Исполнитель 3', load: 0.7 }\n];\n\nconst selected = executors.reduce((min, current) => current.load < min.load ? current : min);\n\nreturn [{\n  json: {\n    ...order,\n    assignedExecutor: selected.id,\n    assignedExecutorName: selected.name,\n    status: 'new',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "name": "Function - Process Order",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO orders (order_id, customer_id, description, assigned_executor, assigned_executor_name, status, created_at) VALUES ('{{$json.orderId}}', '{{$json.customerId}}', '{{$json.description}}', '{{$json.assignedExecutor}}', '{{$json.assignedExecutorName}}', '{{$json.status}}', '{{$json.timestamp}}') RETURNING *;",
        "additionalFields": {}
      },
      "name": "PostgreSQL - Insert Order",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [650, 300],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  success: true,\n  message: 'Заказ создан',\n  orderId: $json.order_id,\n  executor: $json.assigned_executor_name\n} }}"
      },
      "name": "Respond - Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "orders",
        "responseMode": "responseNode"
      },
      "name": "Webhook - Get Orders",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 500]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM orders ORDER BY created_at DESC;",
        "additionalFields": {}
      },
      "name": "PostgreSQL - Get Orders",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [450, 500],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  success: true,\n  count: $json.length,\n  orders: $json\n} }}"
      },
      "name": "Respond - Orders List",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [650, 500]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "orders/:id",
        "responseMode": "responseNode"
      },
      "name": "Webhook - Get Order",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 700]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM orders WHERE order_id = '{{$node[\"Webhook - Get Order\"].parameter[\"path\"].split(\"/\")[1]}}';",
        "additionalFields": {}
      },
      "name": "PostgreSQL - Get Order",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [450, 700],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Проверка результата запроса\nconst result = items[0].json;\n\nif (!result || result.length === 0) {\n  return [{\n    json: {\n      success: false,\n      message: 'Заказ не найден'\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    success: true,\n    order: result[0]\n  }\n}];"
      },
      "name": "Function - Check Order",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [650, 700]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "name": "Respond - Order",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [850, 700]
    },
    {
      "parameters": {
        "httpMethod": "PUT",
        "path": "orders/:id",
        "responseMode": "responseNode"
      },
      "name": "Webhook - Update Order",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 900]
    },
    {
      "parameters": {
        "functionCode": "// Получение данных для обновления\nconst data = items[0].json;\nconst orderId = $node[\"Webhook - Update Order\"].parameter[\"path\"].split(\"/\")[1];\n\nif (!data) {\n  throw new Error('Нет данных для обновления');\n}\n\n// Формирование запроса обновления\nlet updateFields = [];\nlet updateValues = [];\n\nif (data.status) {\n  updateFields.push('status = $' + (updateFields.length + 1));\n  updateValues.push(data.status);\n}\n\nif (data.description) {\n  updateFields.push('description = $' + (updateFields.length + 1));\n  updateValues.push(data.description);\n}\n\nif (data.assignedExecutor) {\n  updateFields.push('assigned_executor = $' + (updateFields.length + 1));\n  updateValues.push(data.assignedExecutor);\n}\n\nif (data.assignedExecutorName) {\n  updateFields.push('assigned_executor_name = $' + (updateFields.length + 1));\n  updateValues.push(data.assignedExecutorName);\n}\n\n// Добавляем order_id в конец массива значений\nupdateValues.push(orderId);\n\nconst query = `UPDATE orders SET ${updateFields.join(', ')} WHERE order_id = $${updateValues.length} RETURNING *;`;\n\nreturn [{\n  json: {\n    query,\n    values: updateValues,\n    orderId\n  }\n}];"
      },
      "name": "Function - Prepare Update",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [450, 900]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $json.query }}",
        "additionalFields": {
          "queryParams": "={{ $json.values }}"
        }
      },
      "name": "PostgreSQL - Update Order",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [650, 900],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Проверка результата обновления\nconst result = items[0].json;\n\nif (!result || result.length === 0) {\n  return [{\n    json: {\n      success: false,\n      message: 'Заказ не найден или не обновлен'\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    success: true,\n    message: 'Заказ обновлен',\n    order: result[0]\n  }\n}];"
      },
      "name": "Function - Check Update",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [850, 900]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "name": "Respond - Update",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1050, 900]
    },
    {
      "parameters": {
        "httpMethod": "DELETE",
        "path": "orders/:id",
        "responseMode": "responseNode"
      },
      "name": "Webhook - Delete Order",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 1100]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM orders WHERE order_id = '{{$node[\"Webhook - Delete Order\"].parameter[\"path\"].split(\"/\")[1]}}' RETURNING *;",
        "additionalFields": {}
      },
      "name": "PostgreSQL - Delete Order",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [450, 1100],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Проверка результата удаления\nconst result = items[0].json;\n\nif (!result || result.length === 0) {\n  return [{\n    json: {\n      success: false,\n      message: 'Заказ не найден или не удален'\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    success: true,\n    message: 'Заказ удален',\n    orderId: result[0].order_id\n  }\n}];"
      },
      "name": "Function - Check Delete",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [650, 1100]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "name": "Respond - Delete",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [850, 1100]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "stats",
        "responseMode": "responseNode"
      },
      "name": "Webhook - Stats",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 1300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  (SELECT COUNT(*) FROM orders) as total_orders,\n  (SELECT COUNT(*) FROM orders WHERE created_at::date = CURRENT_DATE) as today_orders,\n  (SELECT COUNT(DISTINCT assigned_executor) FROM orders) as active_executors;",
        "additionalFields": {}
      },
      "name": "PostgreSQL - Get Stats",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [450, 1300],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Форматирование статистики\nconst stats = items[0].json[0];\n\nreturn [{\n  json: {\n    totalOrders: parseInt(stats.total_orders),\n    todayOrders: parseInt(stats.today_orders),\n    activeExecutors: parseInt(stats.active_executors),\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "name": "Function - Format Stats",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [650, 1300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "name": "Respond - Stats",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [850, 1300]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "health",
        "responseMode": "responseNode"
      },
      "name": "Webhook - Health",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 1500]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT 1 as db_status;",
        "additionalFields": {}
      },
      "name": "PostgreSQL - Check Connection",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [450, 1500],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Проверка состояния\nconst dbStatus = items[0].json[0].db_status === 1 ? 'connected' : 'disconnected';\n\nconst health = {\n  status: dbStatus === 'connected' ? 'healthy' : 'unhealthy',\n  timestamp: new Date().toISOString(),\n  services: {\n    postgresql: dbStatus,\n    n8n: 'running'\n  }\n};\n\nreturn [{ json: health }];"
      },
      "name": "Function - Health",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [650, 1500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "name": "Respond - Health",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [850, 1500]
    }
  ],
  "connections": {
    "Webhook - Create Order": {
      "main": [
        [{ "node": "Function - Process Order", "type": "main", "index": 0 }]
      ]
    },
    "Function - Process Order": {
      "main": [
        [{ "node": "PostgreSQL - Insert Order", "type": "main", "index": 0 }]
      ]
    },
    "PostgreSQL - Insert Order": {
      "main": [
        [{ "node": "Respond - Success", "type": "main", "index": 0 }]
      ]
    },
    "Webhook - Get Orders": {
      "main": [
        [{ "node": "PostgreSQL - Get Orders", "type": "main", "index": 0 }]
      ]
    },
    "PostgreSQL - Get Orders": {
      "main": [
        [{ "node": "Respond - Orders List", "type": "main", "index": 0 }]
      ]
    },
    "Webhook - Get Order": {
      "main": [
        [{ "node": "PostgreSQL - Get Order", "type": "main", "index": 0 }]
      ]
    },
    "PostgreSQL - Get Order": {
      "main": [
        [{ "node": "Function - Check Order", "type": "main", "index": 0 }]
      ]
    },
    "Function - Check Order": {
      "main": [
        [{ "node": "Respond - Order", "type": "main", "index": 0 }]
      ]
    },
    "Webhook - Update Order": {
      "main": [
        [{ "node": "Function - Prepare Update", "type": "main", "index": 0 }]
      ]
    },
    "Function - Prepare Update": {
      "main": [
        [{ "node": "PostgreSQL - Update Order", "type": "main", "index": 0 }]
      ]
    },
    "PostgreSQL - Update Order": {
      "main": [
        [{ "node": "Function - Check Update", "type": "main", "index": 0 }]
      ]
    },
    "Function - Check Update": {
      "main": [
        [{ "node": "Respond - Update", "type": "main", "index": 0 }]
      ]
    },
    "Webhook - Delete Order": {
      "main": [
        [{ "node": "PostgreSQL - Delete Order", "type": "main", "index": 0 }]
      ]
    },
    "PostgreSQL - Delete Order": {
      "main": [
        [{ "node": "Function - Check Delete", "type": "main", "index": 0 }]
      ]
    },
    "Function - Check Delete": {
      "main": [
        [{ "node": "Respond - Delete", "type": "main", "index": 0 }]
      ]
    },
    "Webhook - Stats": {
      "main": [
        [{ "node": "PostgreSQL - Get Stats", "type": "main", "index": 0 }]
      ]
    },
    "PostgreSQL - Get Stats": {
      "main": [
        [{ "node": "Function - Format Stats", "type": "main", "index": 0 }]
      ]
    },
    "Function - Format Stats": {
      "main": [
        [{ "node": "Respond - Stats", "type": "main", "index": 0 }]
      ]
    },
    "Webhook - Health": {
      "main": [
        [{ "node": "PostgreSQL - Check Connection", "type": "main", "index": 0 }]
      ]
    },
    "PostgreSQL - Check Connection": {
      "main": [
        [{ "node": "Function - Health", "type": "main", "index": 0 }]
      ]
    },
    "Function - Health": {
      "main": [
        [{ "node": "Respond - Health", "type": "main", "index": 0 }]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "triggerCount": 0
}